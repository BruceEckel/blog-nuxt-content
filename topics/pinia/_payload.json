[{"data":1,"prerenderedAt":799},["ShallowReactive",2],{"post-/topics/pinia":3},[4,99,443],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":8,"description":9,"type":10,"author":11,"date":14,"last_modified_date":14,"slug":15,"dropdown":16,"meta":17,"canonicalUrl":31,"topics":32,"body":35,"_type":94,"_id":95,"_source":96,"_file":97,"_stem":15,"_extension":98},"/import-pinia-store-into-other-store","",false,"Import Pinia Store Into Other Store","Learn how to access other stores within a store using Pinia.","post",{"name":12,"image":13},"Cody Bontecou","https://codybontecou.com/images/cody-abstract.jpeg","2022-09-28T00:00:00.000Z","import-pinia-store-into-other-store","Pinia",[18,20,23,25,27,29],{"name":19,"content":9},"og:description",{"name":21,"content":22},"og:image","https://codybontecou.com/images/cypress-component-testing-with-nuxt-3.png",{"name":24,"content":9},"og:image:alt",{"name":26,"content":8},"og:title",{"name":28,"content":8},"twitter:title",{"name":30,"content":8},"twitter:text:title","https://codybontecou.com/import-pinia-store-into-other-store.html",[33,34,16],"Vue","State",{"type":36,"children":37,"toc":91},"root",[38,48,59,64,77,82],{"type":39,"tag":40,"props":41,"children":42},"element","h1",{"id":6},[43],{"type":39,"tag":44,"props":45,"children":47},"binding",{"value":46},"$frontmatter.title",[],{"type":39,"tag":49,"props":50,"children":51},"blockquote",{},[52],{"type":39,"tag":53,"props":54,"children":55},"p",{},[56],{"type":57,"value":58},"text","Pinia makes state management within Vue apps a breeze to work with.",{"type":39,"tag":53,"props":60,"children":61},{},[62],{"type":57,"value":63},"A common problem I run into is needing to access state from a different store. This can be solved using Pinia's composition syntax rather than the option syntax.",{"type":39,"tag":65,"props":66,"children":71},"pre",{"className":67,"code":69,"language":70,"meta":6},[68],"language-ts","// store/count.js\nimport { ref } from 'vue'\nimport { defineStore } from 'pinia'\n\nexport const useCountStore = defineStore('count-store', () => {\n  const count = ref(0)\n\n  function increaseCount() {\n    count = count + 1\n  }\n\n  return { count, increaseCount }\n})\n","ts",[72],{"type":39,"tag":73,"props":74,"children":75},"code",{"__ignoreMap":6},[76],{"type":57,"value":69},{"type":39,"tag":53,"props":78,"children":79},{},[80],{"type":57,"value":81},"They can now be imported and used within other Pinia stores like so:",{"type":39,"tag":65,"props":83,"children":86},{"className":84,"code":85,"language":70,"meta":6},[68],"// store/api.js\nimport { ref } from 'vue'\nimport { defineStore, storeToRefs } from 'pinia'\nimport { useCountStore } from './count'\n\nexport const useApiStore = defineStore('api-store', () => {\n  const countStore = useCountStore()\n  const { count } = storeToRefs(countStore)\n  const { increaseCount } = countStore\n\n  function displayCount() {\n    console.log(count)\n  }\n\n  function increment() {\n    increaseCount()\n  }\n\n  return { displayCount, increment }\n})\n",[87],{"type":39,"tag":73,"props":88,"children":89},{"__ignoreMap":6},[90],{"type":57,"value":85},{"title":6,"searchDepth":92,"depth":92,"links":93},2,[],"markdown","content:import-pinia-store-into-other-store.md","content","import-pinia-store-into-other-store.md","md",{"_path":100,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":101,"description":102,"type":10,"author":103,"date":104,"category":105,"dropdown":106,"tags":107,"meta":112,"canonicalUrl":121,"topics":122,"body":124,"_type":94,"_id":440,"_source":96,"_file":441,"_stem":442,"_extension":98},"/nuxt3-and-pinia","Nuxt 3 and Pinia","Integrate Pinia as your state management library for your Nuxt 3 application.",{"name":12,"image":13},"2022-02-15T00:00:00.000Z","tutorials","NuxtJS",[108,33,109,110,111],"vue","Vite","Route","nuxt",[113,114,115,117,118,119,120],{"name":26,"content":101},{"name":19,"content":102},{"name":21,"content":116},"https://codybontecou.com/images/nuxt3-and-pinia-meta.png",{"name":24,"content":101},{"name":26,"content":101},{"name":28,"content":101},{"name":30,"content":101},"https://codybontecou.com/nuxt3-and-pinia.html",[123,16,34,33],"Nuxt",{"type":36,"children":125,"toc":432},[126,131,138,145,150,155,164,179,185,190,201,207,220,229,235,240,249,278,292,298,303,308,319,324,368,374,379,389,418],{"type":39,"tag":40,"props":127,"children":129},{"id":128},"nuxt-3-and-pinia",[130],{"type":57,"value":101},{"type":39,"tag":49,"props":132,"children":133},{},[134],{"type":39,"tag":53,"props":135,"children":136},{},[137],{"type":57,"value":102},{"type":39,"tag":139,"props":140,"children":142},"h2",{"id":141},"vuex-pinia",[143],{"type":57,"value":144},"Vuex -> Pinia",{"type":39,"tag":53,"props":146,"children":147},{},[148],{"type":57,"value":149},"Evan You, the creator of Vue himself, has stated \"Pinia is de facto Vuex 5! At this point it’s really a naming/branding issue.\"",{"type":39,"tag":53,"props":151,"children":152},{},[153],{"type":57,"value":154},"For the time being, it's probably best to be looking towards Pinia content rather than Vuex.",{"type":39,"tag":53,"props":156,"children":157},{},[158],{"type":39,"tag":159,"props":160,"children":163},"img",{"alt":161,"src":162},"\"Pinia is de facto Vuex 5! At this point it’s really a naming/branding issue.\"","https://codybontecou.com/images/evan-pinia-tweet.png",[],{"type":39,"tag":53,"props":165,"children":166},{},[167,169,177],{"type":57,"value":168},"I recommend reading VueJS's official ",{"type":39,"tag":170,"props":171,"children":175},"a",{"href":172,"rel":173},"https://vuejs.org/guide/scaling-up/state-management.html#pinia",[174],"nofollow",[176],{"type":57,"value":10},{"type":57,"value":178}," regarding this to get a better understanding as to why Pinia > Vuex.",{"type":39,"tag":139,"props":180,"children":182},{"id":181},"installing-pinia-in-nuxt-3",[183],{"type":57,"value":184},"Installing Pinia in Nuxt 3",{"type":39,"tag":53,"props":186,"children":187},{},[188],{"type":57,"value":189},"Pinia nearly comes with first-class support for Nuxt 3. You'll need to install two packages:",{"type":39,"tag":65,"props":191,"children":196},{"className":192,"code":194,"language":195,"meta":6},[193],"language-shell","yarn add pinia\nyarn add @pinia/nuxt\n","shell",[197],{"type":39,"tag":73,"props":198,"children":199},{"__ignoreMap":6},[200],{"type":57,"value":194},{"type":39,"tag":139,"props":202,"children":204},{"id":203},"add-pinia-to-your-nuxtconfig-file",[205],{"type":57,"value":206},"Add Pinia to your nuxt.config file",{"type":39,"tag":53,"props":208,"children":209},{},[210,212,218],{"type":57,"value":211},"You'll need to add ",{"type":39,"tag":73,"props":213,"children":215},{"className":214},[],[216],{"type":57,"value":217},"'@pinia/nuxt'",{"type":57,"value":219}," to your modules array.",{"type":39,"tag":65,"props":221,"children":224},{"className":222,"code":223,"language":70,"meta":6},[68],"// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@pinia/nuxt'],\n})\n",[225],{"type":39,"tag":73,"props":226,"children":227},{"__ignoreMap":6},[228],{"type":57,"value":223},{"type":39,"tag":139,"props":230,"children":232},{"id":231},"build-your-pinia-store",[233],{"type":57,"value":234},"Build your Pinia store",{"type":39,"tag":53,"props":236,"children":237},{},[238],{"type":57,"value":239},"Now build a named store. For my use-case, I needed to manage state regarding filters, so the skeleton of my store looks like:",{"type":39,"tag":65,"props":241,"children":244},{"className":242,"code":243,"language":70,"meta":6},[68],"// store/filters.ts\nimport { defineStore } from 'pinia'\n\nexport const useFiltersStore = defineStore({\n  id: 'filter-store',\n  state: () => {\n    return {\n      filtersList: ['youtube', 'twitch'],\n    }\n  },\n  actions: {\n    addValueToFilterList(value: string) {\n      this.filtersList.push(value)\n    },\n  },\n  getters: {\n    filtersList: state => state.filtersList,\n  },\n})\n",[245],{"type":39,"tag":73,"props":246,"children":247},{"__ignoreMap":6},[248],{"type":57,"value":243},{"type":39,"tag":53,"props":250,"children":251},{},[252,254,260,262,268,270,276],{"type":57,"value":253},"This is just showing the general structure of your store. The key is to ",{"type":39,"tag":73,"props":255,"children":257},{"className":256},[],[258],{"type":57,"value":259},"defineStore",{"type":57,"value":261}," and make sure to include an ",{"type":39,"tag":73,"props":263,"children":265},{"className":264},[],[266],{"type":57,"value":267},"id",{"type":57,"value":269},". In this case, I'm using ",{"type":39,"tag":73,"props":271,"children":273},{"className":272},[],[274],{"type":57,"value":275},"'filter-store'",{"type":57,"value":277}," as my id but it could be anything you prefer.",{"type":39,"tag":53,"props":279,"children":280},{},[281,283,290],{"type":57,"value":282},"Read over Pinia's ",{"type":39,"tag":170,"props":284,"children":287},{"href":285,"rel":286},"https://pinia.vuejs.org/core-concepts/",[174],[288],{"type":57,"value":289},"Docs",{"type":57,"value":291}," to get a better grasp of how to use Pinia properly.",{"type":39,"tag":139,"props":293,"children":295},{"id":294},"alternative-pinia-store-syntax",[296],{"type":57,"value":297},"Alternative Pinia Store Syntax",{"type":39,"tag":53,"props":299,"children":300},{},[301],{"type":57,"value":302},"The above example is a valid Pinia store using a pattern similar to Vue's Options API. You can also define your store using a syntax similar to the Composition API.",{"type":39,"tag":53,"props":304,"children":305},{},[306],{"type":57,"value":307},"Here's how you can build the above example in a composable way:",{"type":39,"tag":65,"props":309,"children":314},{"className":310,"code":312,"language":313,"meta":6},[311],"language-js","// store/filters.ts\nimport { defineStore } from 'pinia'\n\nexport const useFiltersStore = defineStore('filterStore', () => {\n  const filtersList = ref(['youtube', 'twitch'])\n\n  function addValueToFilterList(value: string) {\n    filtersList.value.push(value)\n  }\n  return { addValueToFilterList, filtersList }\n})\n","js",[315],{"type":39,"tag":73,"props":316,"children":317},{"__ignoreMap":6},[318],{"type":57,"value":312},{"type":39,"tag":53,"props":320,"children":321},{},[322],{"type":57,"value":323},"We just reduced the amount of code significantly. Pretty cool, right? I personally prefer the composition.",{"type":39,"tag":53,"props":325,"children":326},{},[327,329,335,337,343,345,351,353,359,360,366],{"type":57,"value":328},"Instead of relying on the ",{"type":39,"tag":73,"props":330,"children":332},{"className":331},[],[333],{"type":57,"value":334},"state",{"type":57,"value":336},", ",{"type":39,"tag":73,"props":338,"children":340},{"className":339},[],[341],{"type":57,"value":342},"action",{"type":57,"value":344},", and ",{"type":39,"tag":73,"props":346,"children":348},{"className":347},[],[349],{"type":57,"value":350},"getter",{"type":57,"value":352}," boilerplate, we use Vue's ",{"type":39,"tag":73,"props":354,"children":356},{"className":355},[],[357],{"type":57,"value":358},"ref",{"type":57,"value":336},{"type":39,"tag":73,"props":361,"children":363},{"className":362},[],[364],{"type":57,"value":365},"computed",{"type":57,"value":367},", and traditional Javascript functions to manage our state.",{"type":39,"tag":139,"props":369,"children":371},{"id":370},"bring-pinia-in-vue-component",[372],{"type":57,"value":373},"Bring Pinia in Vue Component",{"type":39,"tag":53,"props":375,"children":376},{},[377],{"type":57,"value":378},"With our store in place, simply import it into the component you want to use it in and have fun!",{"type":39,"tag":65,"props":380,"children":384},{"className":381,"code":383,"language":108,"meta":6},[382],"language-vue","// components/FilterMenu.vue\n\u003Cscript setup>\nimport { useFiltersStore } from '~/store/filters'\nimport { storeToRefs } from 'pinia'\n\nconst inputVal = ref('')\n\nconst filtersStore = useFiltersStore()\nconst { addValueToFilterList } = filtersStore\nconst { filtersList } = storeToRefs(filtersStore)\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv>\n    {{ filtersList }}\n    \u003Cinput v-model=\"inputVal\" />\n    \u003Cbutton @click=\"addValueToFilterList(inputVal)\">+\u003C/button>\n  \u003C/div>\n\u003C/template>\n",[385],{"type":39,"tag":73,"props":386,"children":387},{"__ignoreMap":6},[388],{"type":57,"value":383},{"type":39,"tag":53,"props":390,"children":391},{},[392,394,400,402,408,410,416],{"type":57,"value":393},"The line ",{"type":39,"tag":73,"props":395,"children":397},{"className":396},[],[398],{"type":57,"value":399},"import { storeToRefs } from 'pinia'",{"type":57,"value":401}," allows us to maintain a reactive getter. In this case, we are destructuring the ",{"type":39,"tag":73,"props":403,"children":405},{"className":404},[],[406],{"type":57,"value":407},"filterList",{"type":57,"value":409}," getter from our ",{"type":39,"tag":73,"props":411,"children":413},{"className":412},[],[414],{"type":57,"value":415},"filtersStore",{"type":57,"value":417},".",{"type":39,"tag":53,"props":419,"children":420},{},[421,423,430],{"type":57,"value":422},"Here's the ",{"type":39,"tag":170,"props":424,"children":427},{"href":425,"rel":426},"https://github.com/CodyBontecou/nuxt3-and-pinia",[174],[428],{"type":57,"value":429},"repo",{"type":57,"value":431}," if you'd like to see a working project.",{"title":6,"searchDepth":92,"depth":92,"links":433},[434,435,436,437,438,439],{"id":141,"depth":92,"text":144},{"id":181,"depth":92,"text":184},{"id":203,"depth":92,"text":206},{"id":231,"depth":92,"text":234},{"id":294,"depth":92,"text":297},{"id":370,"depth":92,"text":373},"content:nuxt3-and-pinia.md","nuxt3-and-pinia.md","nuxt3-and-pinia",{"_path":444,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":445,"description":446,"type":10,"author":447,"date":448,"category":105,"dropdown":449,"topics":450,"meta":452,"canonicalUrl":461,"body":462,"_type":94,"_id":796,"_source":96,"_file":797,"_stem":798,"_extension":98},"/global-state-management-in-an-electron-app","Global State Management in an Electron Application","Learn to utilize Pinia alongside VueJS within an Electron app to easily manage UI state.",{"name":12,"image":13},"2021-11-30T00:00:00.000Z","Electron",[108,33,16,451,449,334],"Javascript",[453,454,455,457,459,460],{"name":26,"content":445},{"name":19,"content":446},{"name":21,"content":456},"https://codybontecou.com/images/global-state-management-in-an-electron-app-meta.png",{"name":24,"content":458},"State Management in an Electron Application",{"name":28,"content":445},{"name":30,"content":445},"https://codybontecou.com/global-state-management-in-an-electron-app.html",{"type":36,"children":463,"toc":789},[464,470,493,499,504,509,515,537,558,567,580,589,594,600,629,638,644,649,658,671,680,692,701,706,715,721,737,742,754,763,784],{"type":39,"tag":40,"props":465,"children":467},{"id":466},"global-state-management-in-an-electron-application-using-pinia-and-vuejs",[468],{"type":57,"value":469},"Global State Management in an Electron Application using Pinia and VueJS",{"type":39,"tag":49,"props":471,"children":472},{},[473],{"type":39,"tag":53,"props":474,"children":475},{},[476,478,484,486,492],{"type":57,"value":477},"Bringing the VueJS tool ",{"type":39,"tag":170,"props":479,"children":482},{"href":480,"rel":481},"https://pinia.esm.dev/",[174],[483],{"type":57,"value":16},{"type":57,"value":485}," into our Electron application to manage its internal state. This post assumes you have followed along with my previous ",{"type":39,"tag":170,"props":487,"children":490},{"href":488,"rel":489},"https://codybontecou.com/electron-app-with-vuejs-and-vite.html",[174],[491],{"type":57,"value":10},{"type":57,"value":417},{"type":39,"tag":139,"props":494,"children":496},{"id":495},"what-is-a-store",[497],{"type":57,"value":498},"What is a Store?",{"type":39,"tag":53,"props":500,"children":501},{},[502],{"type":57,"value":503},"A Store is an entity that manages the global state of your application. It allows you to read and write to, regardless of the component you are working within.",{"type":39,"tag":53,"props":505,"children":506},{},[507],{"type":57,"value":508},"You may have heard of other packages that help manage a store, Vuex is the standard for Vue and Redux is the standard for React.",{"type":39,"tag":139,"props":510,"children":512},{"id":511},"installation",[513],{"type":57,"value":514},"Installation",{"type":39,"tag":49,"props":516,"children":517},{},[518],{"type":39,"tag":53,"props":519,"children":520},{},[521,523,527,529,536],{"type":57,"value":522},"This assumes you are using Vue 3. ",{"type":39,"tag":524,"props":525,"children":526},"br",{},[],{"type":57,"value":528},"\nIf you are using Vue 2, please refer to their ",{"type":39,"tag":170,"props":530,"children":533},{"href":531,"rel":532},"https://pinia.esm.dev/getting-started.html#installation",[174],[534],{"type":57,"value":535},"documentation",{"type":57,"value":417},{"type":39,"tag":53,"props":538,"children":539},{},[540,542,548,550,556],{"type":57,"value":541},"Because we are hooking this up to an Electron application, which is just Javascript with extra steps, we can utilize our favorite package manager such as ",{"type":39,"tag":73,"props":543,"children":545},{"className":544},[],[546],{"type":57,"value":547},"npm",{"type":57,"value":549}," or ",{"type":39,"tag":73,"props":551,"children":553},{"className":552},[],[554],{"type":57,"value":555},"yarn",{"type":57,"value":557}," to install Pinia.",{"type":39,"tag":65,"props":559,"children":562},{"className":560,"code":561,"language":195,"meta":6},[193],"yarn add pinia\n# or with npm\nnpm install pinia\n",[563],{"type":39,"tag":73,"props":564,"children":565},{"__ignoreMap":6},[566],{"type":57,"value":561},{"type":39,"tag":53,"props":568,"children":569},{},[570,572,578],{"type":57,"value":571},"Use the ",{"type":39,"tag":73,"props":573,"children":575},{"className":574},[],[576],{"type":57,"value":577},"createPinia",{"type":57,"value":579}," function to attach it to the VueJS app:",{"type":39,"tag":65,"props":581,"children":584},{"className":582,"code":583,"language":313,"meta":6},[311],"// renderer/main.js\n\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { createPinia } from 'pinia'\n\ncreateApp(App)\n  .use(createPinia())\n  .mount('#app')\n",[585],{"type":39,"tag":73,"props":586,"children":587},{"__ignoreMap":6},[588],{"type":57,"value":583},{"type":39,"tag":53,"props":590,"children":591},{},[592],{"type":57,"value":593},"Pinia is now available throughout your Electron application where Vue is available.",{"type":39,"tag":139,"props":595,"children":597},{"id":596},"creating-our-first-store",[598],{"type":57,"value":599},"Creating our first store",{"type":39,"tag":53,"props":601,"children":602},{},[603,605,611,613,619,621,627],{"type":57,"value":604},"A store is defined using ",{"type":39,"tag":73,"props":606,"children":608},{"className":607},[],[609],{"type":57,"value":610},"defineStore()",{"type":57,"value":612}," and requires a ",{"type":39,"tag":614,"props":615,"children":616},"em",{},[617],{"type":57,"value":618},"unique",{"type":57,"value":620}," name. In this case, I am using ",{"type":39,"tag":73,"props":622,"children":624},{"className":623},[],[625],{"type":57,"value":626},"main",{"type":57,"value":628}," as the unique id attached to this store.",{"type":39,"tag":65,"props":630,"children":633},{"className":631,"code":632,"language":313,"meta":6},[311],"// renderer/stores/main.js\n\nimport { defineStore } from 'pinia'\n\n// useMainStore could be anything like useUser, useCart\n// the first argument is a unique id of the store across your application\nexport const useMainStore = defineStore('main', {\n  state: () => ({\n    msg: 'Hello World!',\n  }),\n  getters: {\n    message: state => state.msg,\n  },\n  actions: {},\n})\n",[634],{"type":39,"tag":73,"props":635,"children":636},{"__ignoreMap":6},[637],{"type":57,"value":632},{"type":39,"tag":139,"props":639,"children":641},{"id":640},"using-our-store-within-a-vuejs-component",[642],{"type":57,"value":643},"Using our store within a VueJS component",{"type":39,"tag":53,"props":645,"children":646},{},[647],{"type":57,"value":648},"Now that our store is made, we can import it into individual components, allowing our components to interact with the store.",{"type":39,"tag":65,"props":650,"children":653},{"className":651,"code":652,"language":313,"meta":6},[311],"import { useMainStore } from '@/stores/main'\n",[654],{"type":39,"tag":73,"props":655,"children":656},{"__ignoreMap":6},[657],{"type":57,"value":652},{"type":39,"tag":53,"props":659,"children":660},{},[661,663,669],{"type":57,"value":662},"Within the ",{"type":39,"tag":73,"props":664,"children":666},{"className":665},[],[667],{"type":57,"value":668},"setup",{"type":57,"value":670}," function, I call our store function and set the value within a const variable:",{"type":39,"tag":65,"props":672,"children":675},{"className":673,"code":674,"language":313,"meta":6},[311],"setup() {\n  const main = useMainStore()\n}\n",[676],{"type":39,"tag":73,"props":677,"children":678},{"__ignoreMap":6},[679],{"type":57,"value":674},{"type":39,"tag":53,"props":681,"children":682},{},[683,685,691],{"type":57,"value":684},"This allows me to interact with my store. For this simple example, I am displaying the message defined within the ",{"type":39,"tag":170,"props":686,"children":689},{"href":687,"rel":688},"https://pinia.esm.dev/core-concepts/getters.html",[174],[690],{"type":57,"value":350},{"type":57,"value":417},{"type":39,"tag":65,"props":693,"children":696},{"className":694,"code":695,"language":313,"meta":6},[311],"setup() {\n  const main = useMainStore()\n\n  return {\n    message: computed(() => main.message),\n}\n",[697],{"type":39,"tag":73,"props":698,"children":699},{"__ignoreMap":6},[700],{"type":57,"value":695},{"type":39,"tag":53,"props":702,"children":703},{},[704],{"type":57,"value":705},"The entire component can be seen below:",{"type":39,"tag":65,"props":707,"children":710},{"className":708,"code":709,"language":108,"meta":6},[382],"// renderer/components/Hello.vue\n\n\u003Ctemplate>\n  \u003Cdiv id=\"hello\">\n    \u003Cimg src=\"https://vuejs.org/images/logo.png\" />\n    \u003Ch1>{{ message }}\u003C/h1>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript>\nimport { computed, defineComponent } from 'vue'\nimport { useMainStore } from '@/stores/main'\n\nexport default defineComponent({\n  setup() {\n    const main = useMainStore()\n\n    return {\n      message: computed(() => main.message),\n    }\n  },\n})\n\u003C/script>\n",[711],{"type":39,"tag":73,"props":712,"children":713},{"__ignoreMap":6},[714],{"type":57,"value":709},{"type":39,"tag":139,"props":716,"children":718},{"id":717},"getting-hmr-to-work",[719],{"type":57,"value":720},"Getting HMR to work",{"type":39,"tag":49,"props":722,"children":723},{},[724],{"type":39,"tag":53,"props":725,"children":726},{},[727,729,736],{"type":57,"value":728},"While HMR is built into Pinia, it doesn't play well with Electron and requires a bit of additional configuration.\nPinia provides additional documentation of this topic ",{"type":39,"tag":170,"props":730,"children":733},{"href":731,"rel":732},"https://pinia.esm.dev/cookbook/hot-module-replacement.html",[174],[734],{"type":57,"value":735},"here",{"type":57,"value":417},{"type":39,"tag":53,"props":738,"children":739},{},[740],{"type":57,"value":741},"HMR (Hot Module Replacement) allows you to edit your stores and see the changes within your app without having to reload the page or restart your server.",{"type":39,"tag":53,"props":743,"children":744},{},[745,747,752],{"type":57,"value":746},"Here's what my ",{"type":39,"tag":73,"props":748,"children":750},{"className":749},[],[751],{"type":57,"value":626},{"type":57,"value":753}," store looks like after updating it to allow for HMR:",{"type":39,"tag":65,"props":755,"children":758},{"className":756,"code":757,"language":313,"meta":6},[311],"import { defineStore, acceptHMRUpdate } from 'pinia'\n\nexport const useMainStore = defineStore('main', {\n  state: () => ({\n    msg: 'Hello World!',\n  }),\n  getters: {\n    message: state => state.msg,\n  },\n  actions: {},\n})\n\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useMainStore, import.meta.hot))\n}\n",[759],{"type":39,"tag":73,"props":760,"children":761},{"__ignoreMap":6},[762],{"type":57,"value":757},{"type":39,"tag":53,"props":764,"children":765},{},[766,768,774,776,782],{"type":57,"value":767},"Passing ",{"type":39,"tag":73,"props":769,"children":771},{"className":770},[],[772],{"type":57,"value":773},"acceptHMRUpdate",{"type":57,"value":775}," your store (",{"type":39,"tag":73,"props":777,"children":779},{"className":778},[],[780],{"type":57,"value":781},"useMainStore",{"type":57,"value":783}," in my case), it gives us HMR!",{"type":39,"tag":53,"props":785,"children":786},{},[787],{"type":57,"value":788},"Hope you enjoyed!",{"title":6,"searchDepth":92,"depth":92,"links":790},[791,792,793,794,795],{"id":495,"depth":92,"text":498},{"id":511,"depth":92,"text":514},{"id":596,"depth":92,"text":599},{"id":640,"depth":92,"text":643},{"id":717,"depth":92,"text":720},"content:global-state-management-in-an-electron-app.md","global-state-management-in-an-electron-app.md","global-state-management-in-an-electron-app",1731040016750]