[{"data":1,"prerenderedAt":782},["ShallowReactive",2],{"post-/topics/Pinia":3},[4,92,432],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":8,"description":9,"type":10,"author":11,"date":14,"last_modified_date":14,"slug":15,"dropdown":16,"meta":17,"canonicalUrl":31,"topics":32,"created_at":35,"last_modified":36,"body":37,"_type":87,"_id":88,"_source":89,"_file":90,"_stem":15,"_extension":91},"/import-pinia-store-into-other-store","",false,"Import Pinia Store Into Other Store","Learn how to access other stores within a store using Pinia.","post",{"name":12,"image":13},"Cody Bontecou","https://codybontecou.com/images/cody-abstract.jpeg","2022-09-28","import-pinia-store-into-other-store","Pinia",[18,20,23,25,27,29],{"name":19,"content":9},"og:description",{"name":21,"content":22},"og:image","https://codybontecou.com/images/cypress-component-testing-with-nuxt-3.png",{"name":24,"content":9},"og:image:alt",{"name":26,"content":8},"og:title",{"name":28,"content":8},"twitter:title",{"name":30,"content":8},"twitter:text:title","https://codybontecou.com/import-pinia-store-into-other-store.html",[33,34,16],"vue","State","2024-10-31T14:26","2024-12-12T11:09",{"type":38,"children":39,"toc":84},"root",[40,52,57,70,75],{"type":41,"tag":42,"props":43,"children":44},"element","blockquote",{},[45],{"type":41,"tag":46,"props":47,"children":48},"p",{},[49],{"type":50,"value":51},"text","Pinia makes state management within Vue apps a breeze to work with.",{"type":41,"tag":46,"props":53,"children":54},{},[55],{"type":50,"value":56},"A common problem I run into is needing to access state from a different store. This can be solved using Pinia's composition syntax rather than the option syntax.",{"type":41,"tag":58,"props":59,"children":64},"pre",{"className":60,"code":62,"language":63,"meta":6},[61],"language-ts","// store/count.js\nimport { ref } from 'vue'\nimport { defineStore } from 'pinia'\n\nexport const useCountStore = defineStore('count-store', () => {\n  const count = ref(0)\n\n  function increaseCount() {\n    count = count + 1\n  }\n\n  return { count, increaseCount }\n})\n","ts",[65],{"type":41,"tag":66,"props":67,"children":68},"code",{"__ignoreMap":6},[69],{"type":50,"value":62},{"type":41,"tag":46,"props":71,"children":72},{},[73],{"type":50,"value":74},"They can now be imported and used within other Pinia stores like so:",{"type":41,"tag":58,"props":76,"children":79},{"className":77,"code":78,"language":63,"meta":6},[61],"// store/api.js\nimport { ref } from 'vue'\nimport { defineStore, storeToRefs } from 'pinia'\nimport { useCountStore } from './count'\n\nexport const useApiStore = defineStore('api-store', () => {\n  const countStore = useCountStore()\n  const { count } = storeToRefs(countStore)\n  const { increaseCount } = countStore\n\n  function displayCount() {\n    console.log(count)\n  }\n\n  function increment() {\n    increaseCount()\n  }\n\n  return { displayCount, increment }\n})\n",[80],{"type":41,"tag":66,"props":81,"children":82},{"__ignoreMap":6},[83],{"type":50,"value":78},{"title":6,"searchDepth":85,"depth":85,"links":86},2,[],"markdown","content:import-pinia-store-into-other-store.md","content","import-pinia-store-into-other-store.md","md",{"_path":93,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":94,"description":95,"type":10,"author":96,"date":97,"category":98,"dropdown":99,"tags":100,"meta":105,"canonicalUrl":114,"topics":115,"created_at":35,"last_modified":117,"body":118,"_type":87,"_id":429,"_source":89,"_file":430,"_stem":431,"_extension":91},"/nuxt3-and-pinia","Nuxt 3 and Pinia","Integrate Pinia as your state management library for your Nuxt 3 application.",{"name":12,"image":13},"2022-02-15","tutorials","NuxtJS",[33,101,102,103,104],"Vue","Vite","Route","nuxt",[106,107,108,110,111,112,113],{"name":26,"content":94},{"name":19,"content":95},{"name":21,"content":109},"https://codybontecou.com/images/nuxt3-and-pinia-meta.png",{"name":24,"content":94},{"name":26,"content":94},{"name":28,"content":94},{"name":30,"content":94},"https://codybontecou.com/nuxt3-and-pinia.html",[116,16,34,101],"Nuxt","2024-11-09T21:19",{"type":38,"children":119,"toc":421},[120,127,134,139,144,153,168,174,179,190,196,209,218,224,229,238,267,281,287,292,297,308,313,357,363,368,378,407],{"type":41,"tag":42,"props":121,"children":122},{},[123],{"type":41,"tag":46,"props":124,"children":125},{},[126],{"type":50,"value":95},{"type":41,"tag":128,"props":129,"children":131},"h2",{"id":130},"vuex-pinia",[132],{"type":50,"value":133},"Vuex -> Pinia",{"type":41,"tag":46,"props":135,"children":136},{},[137],{"type":50,"value":138},"Evan You, the creator of Vue himself, has stated \"Pinia is de facto Vuex 5! At this point it’s really a naming/branding issue.\"",{"type":41,"tag":46,"props":140,"children":141},{},[142],{"type":50,"value":143},"For the time being, it's probably best to be looking towards Pinia content rather than Vuex.",{"type":41,"tag":46,"props":145,"children":146},{},[147],{"type":41,"tag":148,"props":149,"children":152},"img",{"alt":150,"src":151},"\"Pinia is de facto Vuex 5! At this point it’s really a naming/branding issue.\"","https://codybontecou.com/images/evan-pinia-tweet.png",[],{"type":41,"tag":46,"props":154,"children":155},{},[156,158,166],{"type":50,"value":157},"I recommend reading VueJS's official ",{"type":41,"tag":159,"props":160,"children":164},"a",{"href":161,"rel":162},"https://vuejs.org/guide/scaling-up/state-management.html#pinia",[163],"nofollow",[165],{"type":50,"value":10},{"type":50,"value":167}," regarding this to get a better understanding as to why Pinia > Vuex.",{"type":41,"tag":128,"props":169,"children":171},{"id":170},"installing-pinia-in-nuxt-3",[172],{"type":50,"value":173},"Installing Pinia in Nuxt 3",{"type":41,"tag":46,"props":175,"children":176},{},[177],{"type":50,"value":178},"Pinia nearly comes with first-class support for Nuxt 3. You'll need to install two packages:",{"type":41,"tag":58,"props":180,"children":185},{"className":181,"code":183,"language":184,"meta":6},[182],"language-shell","yarn add pinia\nyarn add @pinia/nuxt\n","shell",[186],{"type":41,"tag":66,"props":187,"children":188},{"__ignoreMap":6},[189],{"type":50,"value":183},{"type":41,"tag":128,"props":191,"children":193},{"id":192},"add-pinia-to-your-nuxtconfig-file",[194],{"type":50,"value":195},"Add Pinia to your nuxt.config file",{"type":41,"tag":46,"props":197,"children":198},{},[199,201,207],{"type":50,"value":200},"You'll need to add ",{"type":41,"tag":66,"props":202,"children":204},{"className":203},[],[205],{"type":50,"value":206},"'@pinia/nuxt'",{"type":50,"value":208}," to your modules array.",{"type":41,"tag":58,"props":210,"children":213},{"className":211,"code":212,"language":63,"meta":6},[61],"// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@pinia/nuxt'],\n})\n",[214],{"type":41,"tag":66,"props":215,"children":216},{"__ignoreMap":6},[217],{"type":50,"value":212},{"type":41,"tag":128,"props":219,"children":221},{"id":220},"build-your-pinia-store",[222],{"type":50,"value":223},"Build your Pinia store",{"type":41,"tag":46,"props":225,"children":226},{},[227],{"type":50,"value":228},"Now build a named store. For my use-case, I needed to manage state regarding filters, so the skeleton of my store looks like:",{"type":41,"tag":58,"props":230,"children":233},{"className":231,"code":232,"language":63,"meta":6},[61],"// store/filters.ts\nimport { defineStore } from 'pinia'\n\nexport const useFiltersStore = defineStore({\n  id: 'filter-store',\n  state: () => {\n    return {\n      filtersList: ['youtube', 'twitch'],\n    }\n  },\n  actions: {\n    addValueToFilterList(value: string) {\n      this.filtersList.push(value)\n    },\n  },\n  getters: {\n    filtersList: state => state.filtersList,\n  },\n})\n",[234],{"type":41,"tag":66,"props":235,"children":236},{"__ignoreMap":6},[237],{"type":50,"value":232},{"type":41,"tag":46,"props":239,"children":240},{},[241,243,249,251,257,259,265],{"type":50,"value":242},"This is just showing the general structure of your store. The key is to ",{"type":41,"tag":66,"props":244,"children":246},{"className":245},[],[247],{"type":50,"value":248},"defineStore",{"type":50,"value":250}," and make sure to include an ",{"type":41,"tag":66,"props":252,"children":254},{"className":253},[],[255],{"type":50,"value":256},"id",{"type":50,"value":258},". In this case, I'm using ",{"type":41,"tag":66,"props":260,"children":262},{"className":261},[],[263],{"type":50,"value":264},"'filter-store'",{"type":50,"value":266}," as my id but it could be anything you prefer.",{"type":41,"tag":46,"props":268,"children":269},{},[270,272,279],{"type":50,"value":271},"Read over Pinia's ",{"type":41,"tag":159,"props":273,"children":276},{"href":274,"rel":275},"https://pinia.vuejs.org/core-concepts/",[163],[277],{"type":50,"value":278},"Docs",{"type":50,"value":280}," to get a better grasp of how to use Pinia properly.",{"type":41,"tag":128,"props":282,"children":284},{"id":283},"alternative-pinia-store-syntax",[285],{"type":50,"value":286},"Alternative Pinia Store Syntax",{"type":41,"tag":46,"props":288,"children":289},{},[290],{"type":50,"value":291},"The above example is a valid Pinia store using a pattern similar to Vue's Options API. You can also define your store using a syntax similar to the Composition API.",{"type":41,"tag":46,"props":293,"children":294},{},[295],{"type":50,"value":296},"Here's how you can build the above example in a composable way:",{"type":41,"tag":58,"props":298,"children":303},{"className":299,"code":301,"language":302,"meta":6},[300],"language-js","// store/filters.ts\nimport { defineStore } from 'pinia'\n\nexport const useFiltersStore = defineStore('filterStore', () => {\n  const filtersList = ref(['youtube', 'twitch'])\n\n  function addValueToFilterList(value: string) {\n    filtersList.value.push(value)\n  }\n  return { addValueToFilterList, filtersList }\n})\n","js",[304],{"type":41,"tag":66,"props":305,"children":306},{"__ignoreMap":6},[307],{"type":50,"value":301},{"type":41,"tag":46,"props":309,"children":310},{},[311],{"type":50,"value":312},"We just reduced the amount of code significantly. Pretty cool, right? I personally prefer the composition.",{"type":41,"tag":46,"props":314,"children":315},{},[316,318,324,326,332,334,340,342,348,349,355],{"type":50,"value":317},"Instead of relying on the ",{"type":41,"tag":66,"props":319,"children":321},{"className":320},[],[322],{"type":50,"value":323},"state",{"type":50,"value":325},", ",{"type":41,"tag":66,"props":327,"children":329},{"className":328},[],[330],{"type":50,"value":331},"action",{"type":50,"value":333},", and ",{"type":41,"tag":66,"props":335,"children":337},{"className":336},[],[338],{"type":50,"value":339},"getter",{"type":50,"value":341}," boilerplate, we use Vue's ",{"type":41,"tag":66,"props":343,"children":345},{"className":344},[],[346],{"type":50,"value":347},"ref",{"type":50,"value":325},{"type":41,"tag":66,"props":350,"children":352},{"className":351},[],[353],{"type":50,"value":354},"computed",{"type":50,"value":356},", and traditional Javascript functions to manage our state.",{"type":41,"tag":128,"props":358,"children":360},{"id":359},"bring-pinia-in-vue-component",[361],{"type":50,"value":362},"Bring Pinia in Vue Component",{"type":41,"tag":46,"props":364,"children":365},{},[366],{"type":50,"value":367},"With our store in place, simply import it into the component you want to use it in and have fun!",{"type":41,"tag":58,"props":369,"children":373},{"className":370,"code":372,"language":33,"meta":6},[371],"language-vue","// components/FilterMenu.vue\n\u003Cscript setup>\nimport { useFiltersStore } from '~/store/filters'\nimport { storeToRefs } from 'pinia'\n\nconst inputVal = ref('')\n\nconst filtersStore = useFiltersStore()\nconst { addValueToFilterList } = filtersStore\nconst { filtersList } = storeToRefs(filtersStore)\n\u003C/script>\n\n\u003Ctemplate>\n  \u003Cdiv>\n    {{ filtersList }}\n    \u003Cinput v-model=\"inputVal\" />\n    \u003Cbutton @click=\"addValueToFilterList(inputVal)\">+\u003C/button>\n  \u003C/div>\n\u003C/template>\n",[374],{"type":41,"tag":66,"props":375,"children":376},{"__ignoreMap":6},[377],{"type":50,"value":372},{"type":41,"tag":46,"props":379,"children":380},{},[381,383,389,391,397,399,405],{"type":50,"value":382},"The line ",{"type":41,"tag":66,"props":384,"children":386},{"className":385},[],[387],{"type":50,"value":388},"import { storeToRefs } from 'pinia'",{"type":50,"value":390}," allows us to maintain a reactive getter. In this case, we are destructuring the ",{"type":41,"tag":66,"props":392,"children":394},{"className":393},[],[395],{"type":50,"value":396},"filterList",{"type":50,"value":398}," getter from our ",{"type":41,"tag":66,"props":400,"children":402},{"className":401},[],[403],{"type":50,"value":404},"filtersStore",{"type":50,"value":406},".",{"type":41,"tag":46,"props":408,"children":409},{},[410,412,419],{"type":50,"value":411},"Here's the ",{"type":41,"tag":159,"props":413,"children":416},{"href":414,"rel":415},"https://github.com/CodyBontecou/nuxt3-and-pinia",[163],[417],{"type":50,"value":418},"repo",{"type":50,"value":420}," if you'd like to see a working project.",{"title":6,"searchDepth":85,"depth":85,"links":422},[423,424,425,426,427,428],{"id":130,"depth":85,"text":133},{"id":170,"depth":85,"text":173},{"id":192,"depth":85,"text":195},{"id":220,"depth":85,"text":223},{"id":283,"depth":85,"text":286},{"id":359,"depth":85,"text":362},"content:nuxt3-and-pinia.md","nuxt3-and-pinia.md","nuxt3-and-pinia",{"_path":433,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":434,"description":435,"type":10,"author":436,"date":437,"category":98,"dropdown":438,"topics":439,"meta":441,"canonicalUrl":450,"created_at":35,"last_modified":36,"body":451,"_type":87,"_id":779,"_source":89,"_file":780,"_stem":781,"_extension":91},"/global-state-management-in-an-electron-app","Global State Management in an Electron Application","Learn to utilize Pinia alongside VueJS within an Electron app to easily manage UI state.",{"name":12,"image":13},"2021-11-30","Electron",[33,16,440,438,323],"Javascript",[442,443,444,446,448,449],{"name":26,"content":434},{"name":19,"content":435},{"name":21,"content":445},"https://codybontecou.com/images/global-state-management-in-an-electron-app-meta.png",{"name":24,"content":447},"State Management in an Electron Application",{"name":28,"content":434},{"name":30,"content":434},"https://codybontecou.com/global-state-management-in-an-electron-app.html",{"type":38,"children":452,"toc":772},[453,476,482,487,492,498,520,541,550,563,572,577,583,612,621,627,632,641,654,663,675,684,689,698,704,720,725,737,746,767],{"type":41,"tag":42,"props":454,"children":455},{},[456],{"type":41,"tag":46,"props":457,"children":458},{},[459,461,467,469,475],{"type":50,"value":460},"Bringing the VueJS tool ",{"type":41,"tag":159,"props":462,"children":465},{"href":463,"rel":464},"https://pinia.esm.dev/",[163],[466],{"type":50,"value":16},{"type":50,"value":468}," into our Electron application to manage its internal state. This post assumes you have followed along with my previous ",{"type":41,"tag":159,"props":470,"children":473},{"href":471,"rel":472},"https://codybontecou.com/electron-app-with-vuejs-and-vite.html",[163],[474],{"type":50,"value":10},{"type":50,"value":406},{"type":41,"tag":128,"props":477,"children":479},{"id":478},"what-is-a-store",[480],{"type":50,"value":481},"What is a Store?",{"type":41,"tag":46,"props":483,"children":484},{},[485],{"type":50,"value":486},"A Store is an entity that manages the global state of your application. It allows you to read and write to, regardless of the component you are working within.",{"type":41,"tag":46,"props":488,"children":489},{},[490],{"type":50,"value":491},"You may have heard of other packages that help manage a store, Vuex is the standard for Vue and Redux is the standard for React.",{"type":41,"tag":128,"props":493,"children":495},{"id":494},"installation",[496],{"type":50,"value":497},"Installation",{"type":41,"tag":42,"props":499,"children":500},{},[501],{"type":41,"tag":46,"props":502,"children":503},{},[504,506,510,512,519],{"type":50,"value":505},"This assumes you are using Vue 3. ",{"type":41,"tag":507,"props":508,"children":509},"br",{},[],{"type":50,"value":511},"\nIf you are using Vue 2, please refer to their ",{"type":41,"tag":159,"props":513,"children":516},{"href":514,"rel":515},"https://pinia.esm.dev/getting-started.html#installation",[163],[517],{"type":50,"value":518},"documentation",{"type":50,"value":406},{"type":41,"tag":46,"props":521,"children":522},{},[523,525,531,533,539],{"type":50,"value":524},"Because we are hooking this up to an Electron application, which is just Javascript with extra steps, we can utilize our favorite package manager such as ",{"type":41,"tag":66,"props":526,"children":528},{"className":527},[],[529],{"type":50,"value":530},"npm",{"type":50,"value":532}," or ",{"type":41,"tag":66,"props":534,"children":536},{"className":535},[],[537],{"type":50,"value":538},"yarn",{"type":50,"value":540}," to install Pinia.",{"type":41,"tag":58,"props":542,"children":545},{"className":543,"code":544,"language":184,"meta":6},[182],"yarn add pinia\n# or with npm\nnpm install pinia\n",[546],{"type":41,"tag":66,"props":547,"children":548},{"__ignoreMap":6},[549],{"type":50,"value":544},{"type":41,"tag":46,"props":551,"children":552},{},[553,555,561],{"type":50,"value":554},"Use the ",{"type":41,"tag":66,"props":556,"children":558},{"className":557},[],[559],{"type":50,"value":560},"createPinia",{"type":50,"value":562}," function to attach it to the VueJS app:",{"type":41,"tag":58,"props":564,"children":567},{"className":565,"code":566,"language":302,"meta":6},[300],"// renderer/main.js\n\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { createPinia } from 'pinia'\n\ncreateApp(App)\n  .use(createPinia())\n  .mount('#app')\n",[568],{"type":41,"tag":66,"props":569,"children":570},{"__ignoreMap":6},[571],{"type":50,"value":566},{"type":41,"tag":46,"props":573,"children":574},{},[575],{"type":50,"value":576},"Pinia is now available throughout your Electron application where Vue is available.",{"type":41,"tag":128,"props":578,"children":580},{"id":579},"creating-our-first-store",[581],{"type":50,"value":582},"Creating our first store",{"type":41,"tag":46,"props":584,"children":585},{},[586,588,594,596,602,604,610],{"type":50,"value":587},"A store is defined using ",{"type":41,"tag":66,"props":589,"children":591},{"className":590},[],[592],{"type":50,"value":593},"defineStore()",{"type":50,"value":595}," and requires a ",{"type":41,"tag":597,"props":598,"children":599},"em",{},[600],{"type":50,"value":601},"unique",{"type":50,"value":603}," name. In this case, I am using ",{"type":41,"tag":66,"props":605,"children":607},{"className":606},[],[608],{"type":50,"value":609},"main",{"type":50,"value":611}," as the unique id attached to this store.",{"type":41,"tag":58,"props":613,"children":616},{"className":614,"code":615,"language":302,"meta":6},[300],"// renderer/stores/main.js\n\nimport { defineStore } from 'pinia'\n\n// useMainStore could be anything like useUser, useCart\n// the first argument is a unique id of the store across your application\nexport const useMainStore = defineStore('main', {\n  state: () => ({\n    msg: 'Hello World!',\n  }),\n  getters: {\n    message: state => state.msg,\n  },\n  actions: {},\n})\n",[617],{"type":41,"tag":66,"props":618,"children":619},{"__ignoreMap":6},[620],{"type":50,"value":615},{"type":41,"tag":128,"props":622,"children":624},{"id":623},"using-our-store-within-a-vuejs-component",[625],{"type":50,"value":626},"Using our store within a VueJS component",{"type":41,"tag":46,"props":628,"children":629},{},[630],{"type":50,"value":631},"Now that our store is made, we can import it into individual components, allowing our components to interact with the store.",{"type":41,"tag":58,"props":633,"children":636},{"className":634,"code":635,"language":302,"meta":6},[300],"import { useMainStore } from '@/stores/main'\n",[637],{"type":41,"tag":66,"props":638,"children":639},{"__ignoreMap":6},[640],{"type":50,"value":635},{"type":41,"tag":46,"props":642,"children":643},{},[644,646,652],{"type":50,"value":645},"Within the ",{"type":41,"tag":66,"props":647,"children":649},{"className":648},[],[650],{"type":50,"value":651},"setup",{"type":50,"value":653}," function, I call our store function and set the value within a const variable:",{"type":41,"tag":58,"props":655,"children":658},{"className":656,"code":657,"language":302,"meta":6},[300],"setup() {\n  const main = useMainStore()\n}\n",[659],{"type":41,"tag":66,"props":660,"children":661},{"__ignoreMap":6},[662],{"type":50,"value":657},{"type":41,"tag":46,"props":664,"children":665},{},[666,668,674],{"type":50,"value":667},"This allows me to interact with my store. For this simple example, I am displaying the message defined within the ",{"type":41,"tag":159,"props":669,"children":672},{"href":670,"rel":671},"https://pinia.esm.dev/core-concepts/getters.html",[163],[673],{"type":50,"value":339},{"type":50,"value":406},{"type":41,"tag":58,"props":676,"children":679},{"className":677,"code":678,"language":302,"meta":6},[300],"setup() {\n  const main = useMainStore()\n\n  return {\n    message: computed(() => main.message),\n}\n",[680],{"type":41,"tag":66,"props":681,"children":682},{"__ignoreMap":6},[683],{"type":50,"value":678},{"type":41,"tag":46,"props":685,"children":686},{},[687],{"type":50,"value":688},"The entire component can be seen below:",{"type":41,"tag":58,"props":690,"children":693},{"className":691,"code":692,"language":33,"meta":6},[371],"// renderer/components/Hello.vue\n\n\u003Ctemplate>\n  \u003Cdiv id=\"hello\">\n    \u003Cimg src=\"https://vuejs.org/images/logo.png\" />\n    \u003Ch1>{{ message }}\u003C/h1>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript>\nimport { computed, defineComponent } from 'vue'\nimport { useMainStore } from '@/stores/main'\n\nexport default defineComponent({\n  setup() {\n    const main = useMainStore()\n\n    return {\n      message: computed(() => main.message),\n    }\n  },\n})\n\u003C/script>\n",[694],{"type":41,"tag":66,"props":695,"children":696},{"__ignoreMap":6},[697],{"type":50,"value":692},{"type":41,"tag":128,"props":699,"children":701},{"id":700},"getting-hmr-to-work",[702],{"type":50,"value":703},"Getting HMR to work",{"type":41,"tag":42,"props":705,"children":706},{},[707],{"type":41,"tag":46,"props":708,"children":709},{},[710,712,719],{"type":50,"value":711},"While HMR is built into Pinia, it doesn't play well with Electron and requires a bit of additional configuration.\nPinia provides additional documentation of this topic ",{"type":41,"tag":159,"props":713,"children":716},{"href":714,"rel":715},"https://pinia.esm.dev/cookbook/hot-module-replacement.html",[163],[717],{"type":50,"value":718},"here",{"type":50,"value":406},{"type":41,"tag":46,"props":721,"children":722},{},[723],{"type":50,"value":724},"HMR (Hot Module Replacement) allows you to edit your stores and see the changes within your app without having to reload the page or restart your server.",{"type":41,"tag":46,"props":726,"children":727},{},[728,730,735],{"type":50,"value":729},"Here's what my ",{"type":41,"tag":66,"props":731,"children":733},{"className":732},[],[734],{"type":50,"value":609},{"type":50,"value":736}," store looks like after updating it to allow for HMR:",{"type":41,"tag":58,"props":738,"children":741},{"className":739,"code":740,"language":302,"meta":6},[300],"import { defineStore, acceptHMRUpdate } from 'pinia'\n\nexport const useMainStore = defineStore('main', {\n  state: () => ({\n    msg: 'Hello World!',\n  }),\n  getters: {\n    message: state => state.msg,\n  },\n  actions: {},\n})\n\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useMainStore, import.meta.hot))\n}\n",[742],{"type":41,"tag":66,"props":743,"children":744},{"__ignoreMap":6},[745],{"type":50,"value":740},{"type":41,"tag":46,"props":747,"children":748},{},[749,751,757,759,765],{"type":50,"value":750},"Passing ",{"type":41,"tag":66,"props":752,"children":754},{"className":753},[],[755],{"type":50,"value":756},"acceptHMRUpdate",{"type":50,"value":758}," your store (",{"type":41,"tag":66,"props":760,"children":762},{"className":761},[],[763],{"type":50,"value":764},"useMainStore",{"type":50,"value":766}," in my case), it gives us HMR!",{"type":41,"tag":46,"props":768,"children":769},{},[770],{"type":50,"value":771},"Hope you enjoyed!",{"title":6,"searchDepth":85,"depth":85,"links":773},[774,775,776,777,778],{"id":478,"depth":85,"text":481},{"id":494,"depth":85,"text":497},{"id":579,"depth":85,"text":582},{"id":623,"depth":85,"text":626},{"id":700,"depth":85,"text":703},"content:global-state-management-in-an-electron-app.md","global-state-management-in-an-electron-app.md","global-state-management-in-an-electron-app",1734027080295]