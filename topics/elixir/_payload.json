[{"data":1,"prerenderedAt":289},["ShallowReactive",2],{"post-/topics/elixir":3},[4],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":8,"description":9,"type":10,"author":11,"date":14,"last_modified_date":14,"slug":15,"dropdown":16,"meta":17,"canonicalUrl":31,"topics":32,"created_at":36,"last_modified":37,"body":38,"_type":284,"_id":285,"_source":286,"_file":287,"_stem":15,"_extension":288},"/mocking-http-responses-in-elixir-and-phoenix","",false,"Mocking HTTP Responses in Elixir and Phoenix","A quick walkthrough of the configuration needed to support mocks and modules only used within your Elixir tests","post",{"name":12,"image":13},"Cody Bontecou","/assets/img/cody.64b57256.jpg","2023-08-13T00:00:00.000Z","mocking-http-responses-in-elixir-and-phoenix","Elixir",[18,20,23,25,27,29],{"name":19,"content":9},"og:description",{"name":21,"content":22},"og:image","https://codybontecou.com/images/mocking-http-responses-in-elixir-and-phoenix.png",{"name":24,"content":9},"og:image:alt",{"name":26,"content":8},"og:title",{"name":28,"content":8},"twitter:title",{"name":30,"content":8},"twitter:text:title","https://codybontecou.com/mocking-http-responses-in-elixir-and-phoenix.html",[33,34,35],"elixir","testing","mocking","2024-10-31T14:26","2024-11-09T21:19",{"type":39,"children":40,"toc":278},"root",[41,49,59,66,71,82,87,96,116,122,143,167,194,203,208,259,265],{"type":42,"tag":43,"props":44,"children":45},"element","p",{},[46],{"type":47,"value":48},"text","I just came across this error while attempting to mock the response of a 3rd party api:",{"type":42,"tag":43,"props":50,"children":51},{},[52],{"type":42,"tag":53,"props":54,"children":56},"code",{"className":55},[],[57],{"type":47,"value":58},"** (UndefinedFunctionError) function LeagueInfoMocks.get_live/0 is undefined (module LeagueInfoMocks is not available)",{"type":42,"tag":60,"props":61,"children":63},"h2",{"id":62},"the-problem",[64],{"type":47,"value":65},"The Problem",{"type":42,"tag":43,"props":67,"children":68},{},[69],{"type":47,"value":70},"I couldn't wrap my head around it. I have this simple mock module defined:",{"type":42,"tag":72,"props":73,"children":77},"pre",{"className":74,"code":76,"language":33,"meta":6},[75],"language-elixir","defmodule LeagueInfoMocks do\n  def get_live do\n    %{...}\n  end\nend\n\n",[78],{"type":42,"tag":53,"props":79,"children":80},{"__ignoreMap":6},[81],{"type":47,"value":76},{"type":42,"tag":43,"props":83,"children":84},{},[85],{"type":47,"value":86},"And a test module to interact with the get_live function:",{"type":42,"tag":72,"props":88,"children":91},{"className":89,"code":90,"language":33,"meta":6},[75],"defmodule LeagueInfoTest do\n  use ExUnit.Case\n  test \"format_info\" do\n    data = LeagueInfoMocks.get_live()\n\n    [match | _tail] = data\n\n    assert LeagueInfo.format_info(data) == %{...}\n  end\nend\n\n",[92],{"type":42,"tag":53,"props":93,"children":94},{"__ignoreMap":6},[95],{"type":47,"value":90},{"type":42,"tag":43,"props":97,"children":98},{},[99,101,107,109,114],{"type":47,"value":100},"But running ",{"type":42,"tag":53,"props":102,"children":104},{"className":103},[],[105],{"type":47,"value":106},"mix test",{"type":47,"value":108}," would consistently give me the ",{"type":42,"tag":53,"props":110,"children":112},{"className":111},[],[113],{"type":47,"value":58},{"type":47,"value":115},".",{"type":42,"tag":60,"props":117,"children":119},{"id":118},"the-solution",[120],{"type":47,"value":121},"The Solution",{"type":42,"tag":43,"props":123,"children":124},{},[125,127,133,135,141],{"type":47,"value":126},"Most articles and threads mentioned moving the ",{"type":42,"tag":53,"props":128,"children":130},{"className":129},[],[131],{"type":47,"value":132},"LeagueInfoMocks",{"type":47,"value":134}," module in the ",{"type":42,"tag":53,"props":136,"children":138},{"className":137},[],[139],{"type":47,"value":140},"test/support/*",{"type":47,"value":142}," directory, so I did. This didn't change the error message.",{"type":42,"tag":43,"props":144,"children":145},{},[146,148,157,159,165],{"type":47,"value":147},"I eventually found ",{"type":42,"tag":149,"props":150,"children":154},"a",{"href":151,"rel":152},"https://stackoverflow.com/a/73967553/6642089",[153],"nofollow",[155],{"type":47,"value":156},"this",{"type":47,"value":158}," Stackoverflow comment that mentioned some configuration needed in the ",{"type":42,"tag":53,"props":160,"children":162},{"className":161},[],[163],{"type":47,"value":164},"mix.exs",{"type":47,"value":166}," file.",{"type":42,"tag":43,"props":168,"children":169},{},[170,172,178,180,185,187,192],{"type":47,"value":171},"Supposedly, ",{"type":42,"tag":53,"props":173,"children":175},{"className":174},[],[176],{"type":47,"value":177},"mix phx.new",{"type":47,"value":179}," adds the ",{"type":42,"tag":53,"props":181,"children":183},{"className":182},[],[184],{"type":47,"value":140},{"type":47,"value":186}," support when a Phoenix project is created. In my case, I'm building off of a simple Elixir application. This required me to configure my ",{"type":42,"tag":53,"props":188,"children":190},{"className":189},[],[191],{"type":47,"value":164},{"type":47,"value":193}," file to look like so:",{"type":42,"tag":72,"props":195,"children":198},{"className":196,"code":197,"language":33,"meta":6},[75],"defmodule LolesportsConsumer.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :lolesports_consumer,\n      version: \"0.1.0\",\n      elixir: \"~> 1.15\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps(),\n      elixirc_paths: elixirc_paths(Mix.env())\n    ]\n  end\n\n  # Run \"mix help compile.app\" to learn about applications.\n  def application do\n    [\n      extra_applications: [:logger]\n    ]\n  end\n\n  # Run \"mix help deps\" to learn about dependencies.\n  defp deps do\n    [\n      {:httpoison, \"~> 2.1\"},\n      {:jason, \"~> 1.4\"}\n    ]\n  end\n\n  defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]\n  defp elixirc_paths(_), do: [\"lib\"]\nend\n\n",[199],{"type":42,"tag":53,"props":200,"children":201},{"__ignoreMap":6},[202],{"type":47,"value":197},{"type":42,"tag":43,"props":204,"children":205},{},[206],{"type":47,"value":207},"The key differences were:",{"type":42,"tag":209,"props":210,"children":211},"ol",{},[212,232],{"type":42,"tag":213,"props":214,"children":215},"li",{},[216,218,224,226],{"type":47,"value":217},"Adding ",{"type":42,"tag":53,"props":219,"children":221},{"className":220},[],[222],{"type":47,"value":223},"elixirc_paths: elixirc_paths(Mix.env())",{"type":47,"value":225}," to ",{"type":42,"tag":53,"props":227,"children":229},{"className":228},[],[230],{"type":47,"value":231},"project",{"type":42,"tag":213,"props":233,"children":234},{},[235,237],{"type":47,"value":236},"Adding these two lines to the file:\n",{"type":42,"tag":238,"props":239,"children":240},"ul",{},[241,250],{"type":42,"tag":213,"props":242,"children":243},{},[244],{"type":42,"tag":53,"props":245,"children":247},{"className":246},[],[248],{"type":47,"value":249},"defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]",{"type":42,"tag":213,"props":251,"children":252},{},[253],{"type":42,"tag":53,"props":254,"children":256},{"className":255},[],[257],{"type":47,"value":258},"defp elixirc_paths(_), do: [\"lib\"]",{"type":42,"tag":60,"props":260,"children":262},{"id":261},"conclusion",[263],{"type":47,"value":264},"Conclusion",{"type":42,"tag":43,"props":266,"children":267},{},[268,270,276],{"type":47,"value":269},"With these configuration changes, I am able to properly call ",{"type":42,"tag":53,"props":271,"children":273},{"className":272},[],[274],{"type":47,"value":275},"LeagueInfoMocks.get_live()",{"type":47,"value":277}," and write tests against an expected HTTP response.",{"title":6,"searchDepth":279,"depth":279,"links":280},2,[281,282,283],{"id":62,"depth":279,"text":65},{"id":118,"depth":279,"text":121},{"id":261,"depth":279,"text":264},"markdown","content:mocking-http-responses-in-elixir-and-phoenix.md","content","mocking-http-responses-in-elixir-and-phoenix.md","md",1731222281938]