[{"data":1,"prerenderedAt":1290},["ShallowReactive",2],{"post-/topics/python":3},[4,604],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":8,"description":9,"type":10,"author":11,"date":14,"category":15,"dropdown":16,"topics":17,"meta":22,"canonicalUrl":38,"newsletter":7,"created_at":39,"last_modified":40,"body":41,"_type":598,"_id":599,"_source":600,"_file":601,"_stem":602,"_extension":603},"/generate-twitter-lists-with-python","",false,"Generating Twitter Lists with Python",null,"post",{"name":12,"image":13},"Cody Bontecou","https://codybontecou.com/images/cody-abstract.jpeg","2020-09-15","tutorials","Python",[18,19,20,21],"python","tweepy","twitter","automation",[23,25,28,31,33,35],{"name":24,"content":8},"og:title",{"name":26,"content":27},"og:description","Automatically generating a Twitter List of Paul Grahams feed with Python and Tweepy",{"name":29,"content":30},"og:image","https://codybontecou.com/images/generate-twitter-lists-with-python-meta.png",{"name":32,"content":27},"og:image:alt",{"name":34,"content":8},"twitter:title",{"name":36,"content":37},"twitter:text:title","Generating a Twitter List with Python","https://codybontecou.com/generate-twitter-lists-with-python.html","2024-10-31T14:26","2024-11-09T21:19",{"type":42,"children":43,"toc":587},"root",[44,65,77,100,105,118,125,133,138,143,149,164,169,174,239,245,261,318,329,335,355,364,369,375,380,409,421,430,436,440,459,472,493,502,508,512,523,536,541,553,562,568,582],{"type":45,"tag":46,"props":47,"children":48},"element","blockquote",{},[49],{"type":45,"tag":50,"props":51,"children":52},"p",{},[53,56],{"type":54,"value":55},"text","The finished project can be seen ",{"type":45,"tag":57,"props":58,"children":62},"a",{"href":59,"rel":60},"https://github.com/CodyBontecou/Generating-Twitter-Lists-with-Python/blob/main/tweepy_lists/app.py",[61],"nofollow",[63],{"type":54,"value":64},"here",{"type":45,"tag":50,"props":66,"children":67},{},[68,75],{"type":45,"tag":57,"props":69,"children":72},{"href":70,"rel":71},"https://twitter.com/paulg",[61],[73],{"type":54,"value":74},"Paul Graham",{"type":54,"value":76}," is an influential man in the tech and startup space.",{"type":45,"tag":50,"props":78,"children":79},{},[80,82,89,91,98],{"type":54,"value":81},"His Twitter activity keeps me entertained and informed, spanning from discussions about ",{"type":45,"tag":57,"props":83,"children":86},{"href":84,"rel":85},"https://twitter.com/paulg/status/1437423926980841472",[61],[87],{"type":54,"value":88},"air quality significantly impacting life expectancy",{"type":54,"value":90}," to interesting ",{"type":45,"tag":57,"props":92,"children":95},{"href":93,"rel":94},"https://twitter.com/paulg/status/1437453828606070784",[61],[96],{"type":54,"value":97},"discussions he has with his kids",{"type":54,"value":99},".",{"type":45,"tag":50,"props":101,"children":102},{},[103],{"type":54,"value":104},"The air pollution discussion this morning motivated me to want to see his feed and all of the interesting things a man like Paul sees. I started to follow the accounts he follows and after about 30 or so clicks I decided to investigate Twitter's API for a way to automate this.",{"type":45,"tag":50,"props":106,"children":107},{},[108,110,117],{"type":54,"value":109},"This is where I discovered ",{"type":45,"tag":57,"props":111,"children":114},{"href":112,"rel":113},"https://help.twitter.com/en/using-twitter/twitter-lists",[61],[115],{"type":54,"value":116},"Twitter Lists",{"type":54,"value":99},{"type":45,"tag":119,"props":120,"children":122},"h2",{"id":121},"twitter-lists-are-a-great-way-to-create-custom-feeds",[123],{"type":54,"value":124},"Twitter Lists are a great way to create custom feeds",{"type":45,"tag":46,"props":126,"children":127},{},[128],{"type":45,"tag":50,"props":129,"children":130},{},[131],{"type":54,"value":132},"Viewing a List timeline will show you a stream of Tweets from only the accounts on that List.",{"type":45,"tag":50,"props":134,"children":135},{},[136],{"type":54,"value":137},"Twitter Lists are the perfect solution. It gives me the ability to create custom feeds.",{"type":45,"tag":50,"props":139,"children":140},{},[141],{"type":54,"value":142},"If I feel like delving into Paul Grahams feed, it's a click away. Same with Elon Musk or any of the other influential users on Twitter.",{"type":45,"tag":119,"props":144,"children":146},{"id":145},"using-tweepy-to-automatically-generate-our-twitter-lists",[147],{"type":54,"value":148},"Using Tweepy to automatically generate our Twitter Lists",{"type":45,"tag":46,"props":150,"children":151},{},[152],{"type":45,"tag":50,"props":153,"children":154},{},[155,162],{"type":45,"tag":57,"props":156,"children":159},{"href":157,"rel":158},"https://www.tweepy.org/",[61],[160],{"type":54,"value":161},"Tweepy",{"type":54,"value":163}," is an easy-to-use Python library for accessing the Twitter API.",{"type":45,"tag":50,"props":165,"children":166},{},[167],{"type":54,"value":168},"Tweepy provides built in methods to easily interact with the Twitter API.",{"type":45,"tag":50,"props":170,"children":171},{},[172],{"type":54,"value":173},"In this project, I use the following from Tweepy:",{"type":45,"tag":175,"props":176,"children":177},"ul",{},[178,189,199,209,219,229],{"type":45,"tag":179,"props":180,"children":181},"li",{},[182],{"type":45,"tag":57,"props":183,"children":186},{"href":184,"rel":185},"https://docs.tweepy.org/en/stable/api.html?highlight=API#API",[61],[187],{"type":54,"value":188},"API class",{"type":45,"tag":179,"props":190,"children":191},{},[192],{"type":45,"tag":57,"props":193,"children":196},{"href":194,"rel":195},"https://docs.tweepy.org/en/latest/client.html",[61],[197],{"type":54,"value":198},"Client class",{"type":45,"tag":179,"props":200,"children":201},{},[202],{"type":45,"tag":57,"props":203,"children":206},{"href":204,"rel":205},"https://docs.tweepy.org/en/latest/api.html?highlight=create_list#tweepy.API.create_list",[61],[207],{"type":54,"value":208},".create_list()",{"type":45,"tag":179,"props":210,"children":211},{},[212],{"type":45,"tag":57,"props":213,"children":216},{"href":214,"rel":215},"https://docs.tweepy.org/en/v3.10.0/api.html?highlight=get_user#API.get_user",[61],[217],{"type":54,"value":218},".get_user()",{"type":45,"tag":179,"props":220,"children":221},{},[222],{"type":45,"tag":57,"props":223,"children":226},{"href":224,"rel":225},"https://docs.tweepy.org/en/latest/client.html?highlight=get_users_following#tweepy.client.get_users_following",[61],[227],{"type":54,"value":228},".get_users_following()",{"type":45,"tag":179,"props":230,"children":231},{},[232],{"type":45,"tag":57,"props":233,"children":236},{"href":234,"rel":235},"https://docs.tweepy.org/en/latest/api.html?highlight=add_list_members#tweepy.api.add_list_members",[61],[237],{"type":54,"value":238},".add_list_members",{"type":45,"tag":119,"props":240,"children":242},{"id":241},"authenticating-with-twitters-api-using-tweepy",[243],{"type":54,"value":244},"Authenticating with Twitter's API using Tweepy",{"type":45,"tag":46,"props":246,"children":247},{},[248],{"type":45,"tag":50,"props":249,"children":250},{},[251,253,259],{"type":54,"value":252},"This tutorial will assume you already have a Twitter developer account. If you do not, I went into detail ",{"type":45,"tag":57,"props":254,"children":257},{"href":255,"rel":256},"https://codybontecou.com/programmatically-tweeting-with-nodejs.html#getting-authenticated",[61],[258],{"type":54,"value":64},{"type":54,"value":260}," on how to generate the proper authentication keys needed to access Twitter's API.",{"type":45,"tag":50,"props":262,"children":263},{},[264,266,273,275,281,283,288,290,296,298,303,304,309,311,317],{"type":54,"value":265},"Tweepy provides the helper function ",{"type":45,"tag":267,"props":268,"children":270},"code",{"className":269},[],[271],{"type":54,"value":272},".OAuthHandler",{"type":54,"value":274}," that requires you to pass it your ",{"type":45,"tag":276,"props":277,"children":278},"em",{},[279],{"type":54,"value":280},"consumer key",{"type":54,"value":282}," and ",{"type":45,"tag":276,"props":284,"children":285},{},[286],{"type":54,"value":287},"consumer secret",{"type":54,"value":289}," initializing the auth object, you then must call its method ",{"type":45,"tag":267,"props":291,"children":293},{"className":292},[],[294],{"type":54,"value":295},".set_access_token()",{"type":54,"value":297}," which requires your ",{"type":45,"tag":276,"props":299,"children":300},{},[301],{"type":54,"value":302},"access token",{"type":54,"value":282},{"type":45,"tag":276,"props":305,"children":306},{},[307],{"type":54,"value":308},"access token secret",{"type":54,"value":310}," given to you when creating your developer account and ",{"type":45,"tag":57,"props":312,"children":314},{"href":255,"rel":313},[61],[315],{"type":54,"value":316},"generating your app",{"type":54,"value":99},{"type":45,"tag":319,"props":320,"children":324},"pre",{"className":321,"code":323,"language":18,"meta":6},[322],"language-python","import tweepy\n\nauth = tweepy.OAuthHandler(os.getenv(\"consumer_key\"), os.getenv(\"consumer_secret\"))\nauth.set_access_token(os.getenv(\"access_token\"), os.getenv(\"access_token_secret\"))\n",[325],{"type":45,"tag":267,"props":326,"children":327},{"__ignoreMap":6},[328],{"type":54,"value":323},{"type":45,"tag":119,"props":330,"children":332},{"id":331},"initializing-tweepys-api-and-client-objects",[333],{"type":54,"value":334},"Initializing Tweepy's API and Client objects",{"type":45,"tag":50,"props":336,"children":337},{},[338,340,346,347,353],{"type":54,"value":339},"We can now utilize our auth variable to create ",{"type":45,"tag":57,"props":341,"children":343},{"href":184,"rel":342},[61],[344],{"type":54,"value":345},"API",{"type":54,"value":282},{"type":45,"tag":57,"props":348,"children":350},{"href":194,"rel":349},[61],[351],{"type":54,"value":352},"Client",{"type":54,"value":354}," objects using the following code:",{"type":45,"tag":319,"props":356,"children":359},{"className":357,"code":358,"language":18,"meta":6},[322],"api = tweepy.API(auth)\nclient = tweepy.Client(\n    bearer_token=os.getenv(\"bearer_token\"),\n    consumer_key=os.getenv(\"consumer_key\"),\n    consumer_secret=os.getenv(\"consumer_secret\"),\n    access_token=os.getenv(\"access_token\"),\n    access_token_secret=os.getenv(\"access_token_secret\"),\n    wait_on_rate_limit=True,\n)\n",[360],{"type":45,"tag":267,"props":361,"children":362},{"__ignoreMap":6},[363],{"type":54,"value":358},{"type":45,"tag":50,"props":365,"children":366},{},[367],{"type":54,"value":368},"With these objects, we can now access every Twitter endpoint.",{"type":45,"tag":119,"props":370,"children":372},{"id":371},"creating-a-list-using-tweepys-api",[373],{"type":54,"value":374},"Creating a List using Tweepy's API",{"type":45,"tag":50,"props":376,"children":377},{},[378],{"type":54,"value":379},"Tweepy methods used:",{"type":45,"tag":175,"props":381,"children":382},{},[383],{"type":45,"tag":179,"props":384,"children":385},{},[386,391,393,399,401,407],{"type":45,"tag":57,"props":387,"children":389},{"href":204,"rel":388},[61],[390],{"type":54,"value":208},{"type":54,"value":392},": Takes three parameters: name, mode, and description. Name and description are self-explanatory and mode can either be ",{"type":45,"tag":267,"props":394,"children":396},{"className":395},[],[397],{"type":54,"value":398},"\"public\"",{"type":54,"value":400}," or ",{"type":45,"tag":267,"props":402,"children":404},{"className":403},[],[405],{"type":54,"value":406},"\"private\"",{"type":54,"value":408}," to define the visibility status of the List.",{"type":45,"tag":50,"props":410,"children":411},{},[412,414,420],{"type":54,"value":413},"The response from a successfully List creation returns the List data. I will be using this list later on, so I decided to extract it's id into the variable ",{"type":45,"tag":267,"props":415,"children":417},{"className":416},[],[418],{"type":54,"value":419},"list_id",{"type":54,"value":99},{"type":45,"tag":319,"props":422,"children":425},{"className":423,"code":424,"language":18,"meta":6},[322],"list_name = \"Paul Grahams's Feed\"\nlist_description = \"A list of everyone Paul Graham follows\"\n\ntwitter_list = api.create_list(name=list_name, description=list_description)\nlist_id = twitter_list._json[\"id\"]\n",[426],{"type":45,"tag":267,"props":427,"children":428},{"__ignoreMap":6},[429],{"type":54,"value":424},{"type":45,"tag":119,"props":431,"children":433},{"id":432},"getting-a-user-and-the-accounts-they-follow",[434],{"type":54,"value":435},"Getting a User and the accounts they follow",{"type":45,"tag":50,"props":437,"children":438},{},[439],{"type":54,"value":379},{"type":45,"tag":175,"props":441,"children":442},{},[443,451],{"type":45,"tag":179,"props":444,"children":445},{},[446],{"type":45,"tag":57,"props":447,"children":449},{"href":214,"rel":448},[61],[450],{"type":54,"value":218},{"type":45,"tag":179,"props":452,"children":453},{},[454],{"type":45,"tag":57,"props":455,"children":457},{"href":224,"rel":456},[61],[458],{"type":54,"value":228},{"type":45,"tag":50,"props":460,"children":461},{},[462,464,470],{"type":54,"value":463},"By passing ",{"type":45,"tag":267,"props":465,"children":467},{"className":466},[],[468],{"type":54,"value":469},"client.get_user()",{"type":54,"value":471}," a twitter handle - in this case, Paul Graham - I can get all of the public data Twitter provides regarding that user.",{"type":45,"tag":50,"props":473,"children":474},{},[475,477,483,485,491],{"type":54,"value":476},"I then use that user's data with ",{"type":45,"tag":267,"props":478,"children":480},{"className":479},[],[481],{"type":54,"value":482},"client.get_users_following()",{"type":54,"value":484}," alongside max_results. The argument ",{"type":45,"tag":267,"props":486,"children":488},{"className":487},[],[489],{"type":54,"value":490},"max_results",{"type":54,"value":492}," defines how many user objects Twitter will pass back. In this case, I used the max of 1000. The default is 100.",{"type":45,"tag":319,"props":494,"children":497},{"className":495,"code":496,"language":18,"meta":6},[322],"twitter_handle = \"paulg\"\nuser = client.get_user(username=twitter_handle)\n\nfollowers = client.get_users_following(id=user.data.id, max_results=1000)\n",[498],{"type":45,"tag":267,"props":499,"children":500},{"__ignoreMap":6},[501],{"type":54,"value":496},{"type":45,"tag":119,"props":503,"children":505},{"id":504},"automatially-adding-users-to-the-list",[506],{"type":54,"value":507},"Automatially adding users to the list",{"type":45,"tag":50,"props":509,"children":510},{},[511],{"type":54,"value":379},{"type":45,"tag":175,"props":513,"children":514},{},[515],{"type":45,"tag":179,"props":516,"children":517},{},[518],{"type":45,"tag":57,"props":519,"children":521},{"href":234,"rel":520},[61],[522],{"type":54,"value":238},{"type":45,"tag":50,"props":524,"children":525},{},[526,528,534],{"type":54,"value":527},"Now that we have the List we want to populate and the followers we want populate it with, we use the ",{"type":45,"tag":267,"props":529,"children":531},{"className":530},[],[532],{"type":54,"value":533},"api.add_list_members()",{"type":54,"value":535}," method.",{"type":45,"tag":50,"props":537,"children":538},{},[539],{"type":54,"value":540},"This method takes a list of up to 100 Twitter User ID's. The code snippet below chunks out follower data into sections of 100 Users and generates a list of ids to pass.",{"type":45,"tag":50,"props":542,"children":543},{},[544,546,551],{"type":54,"value":545},"We are also passing this method the ",{"type":45,"tag":267,"props":547,"children":549},{"className":548},[],[550],{"type":54,"value":419},{"type":54,"value":552}," that was saved when we created the list.",{"type":45,"tag":319,"props":554,"children":557},{"className":555,"code":556,"language":18,"meta":6},[322],"for i in range(0, len(followers.data), 100):\n    ids = [follower[\"id\"] for follower in followers.data[i : i + 100]]\n    api.add_list_members(list_id=list_id, user_id=ids)\n",[558],{"type":45,"tag":267,"props":559,"children":560},{"__ignoreMap":6},[561],{"type":54,"value":556},{"type":45,"tag":119,"props":563,"children":565},{"id":564},"things-to-keep-in-mind-when-working-with-twitters-api",[566],{"type":54,"value":567},"Things to keep in mind when working with Twitter's API",{"type":45,"tag":50,"props":569,"children":570},{},[571,573,580],{"type":54,"value":572},"Twitter rate limits just about all of their endpoints. ",{"type":45,"tag":57,"props":574,"children":577},{"href":575,"rel":576},"https://developer.twitter.com/en/docs/twitter-api/v1/rate-limits",[61],[578],{"type":54,"value":579},"Here",{"type":54,"value":581}," is Twitter's documentation on what the rate limits are. Keep this is mind when developing Twitter-based applications because you may find yourself with an odd error.",{"type":45,"tag":50,"props":583,"children":584},{},[585],{"type":54,"value":586},"Thank you for reading! I hope you enjoyed it.",{"title":6,"searchDepth":588,"depth":588,"links":589},2,[590,591,592,593,594,595,596,597],{"id":121,"depth":588,"text":124},{"id":145,"depth":588,"text":148},{"id":241,"depth":588,"text":244},{"id":331,"depth":588,"text":334},{"id":371,"depth":588,"text":374},{"id":432,"depth":588,"text":435},{"id":504,"depth":588,"text":507},{"id":564,"depth":588,"text":567},"markdown","content:generate-twitter-lists-with-python.md","content","generate-twitter-lists-with-python.md","generate-twitter-lists-with-python","md",{"_path":605,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":606,"description":9,"type":10,"author":607,"date":608,"category":15,"dropdown":16,"tags":609,"meta":613,"canonicalUrl":622,"topics":623,"created_at":39,"last_modified":628,"body":629,"_type":598,"_id":1287,"_source":600,"_file":1288,"_stem":1289,"_extension":603},"/selenium-movie-picker","Building a Random Movie Picker Using Python and Selenium",{"name":12,"image":13},"2020-09-07",[16,610,611,612],"Selenium","Web-scraping","Automation",[614,615,617,619,620,621],{"name":24,"content":606},{"name":26,"content":616},"Scraping a list of directors using Selenium with Python to query IMDb's database and randomly select a movie.",{"name":29,"content":618},"https://codybontecou.com/images/selenium-movie-picker-meta.png",{"name":32,"content":606},{"name":34,"content":606},{"name":36,"content":606},"https://codybontecou.com/selenium-movie-picker.html",[624,18,625,626,627],"web-scraping","selenium","IMDB","data","2024-12-12T10:54",{"type":42,"children":630,"toc":1273},[631,654,671,677,685,720,732,745,751,756,770,776,781,802,819,841,847,852,861,1052,1058,1068,1075,1084,1115,1120,1141,1147,1168,1189,1198,1204,1209,1214,1223,1229,1243,1252,1258,1268],{"type":45,"tag":50,"props":632,"children":633},{},[634,636,643,645,652],{"type":54,"value":635},"My wife (Dany) has been reviewing movies every week and posting them on her ",{"type":45,"tag":57,"props":637,"children":640},{"href":638,"rel":639},"https://www.youtube.com/channel/UCcLR5qe7dzXR-5UB_nyK_2w",[61],[641],{"type":54,"value":642},"Youtube Channel",{"type":54,"value":644},". She recently asked me if it was possible to scrape ",{"type":45,"tag":57,"props":646,"children":649},{"href":647,"rel":648},"https://www.elacervo.com/directores",[61],[650],{"type":54,"value":651},"this list of directors",{"type":54,"value":653}," and return a random movie they directed in order to help her decide on which movie to review next.",{"type":45,"tag":50,"props":655,"children":656},{},[657,659,670],{"type":54,"value":658},"Sounds like a job for some ",{"type":45,"tag":276,"props":660,"children":661},{},[662,664],{"type":54,"value":663},"good-ol-web-",{"type":45,"tag":57,"props":665,"children":668},{"href":666,"rel":667},"https://selenium-python.readthedocs.io/",[61],[669],{"type":54,"value":625},{"type":54,"value":99},{"type":45,"tag":119,"props":672,"children":674},{"id":673},"how-i-chose-to-approach-this-problem",[675],{"type":54,"value":676},"How I Chose to Approach this Problem.",{"type":45,"tag":46,"props":678,"children":679},{},[680],{"type":45,"tag":50,"props":681,"children":682},{},[683],{"type":54,"value":684},"Scraping websites can be finicky. You're at the whim of the content creators markdown decisions.",{"type":45,"tag":50,"props":686,"children":687},{},[688,690,696,698,703,705,711,713,719],{"type":54,"value":689},"The markup of ",{"type":45,"tag":57,"props":691,"children":693},{"href":647,"rel":692},[61],[694],{"type":54,"value":695},"Elacervo",{"type":54,"value":697}," is tricky. Their director's page is consistent, but the individual director posts are not. Some director pages have their movie list individual ",{"type":45,"tag":267,"props":699,"children":701},{"className":700},[],[702],{"type":54,"value":50},{"type":54,"value":704}," tags while some have their entire movie list formatted within a single ",{"type":45,"tag":267,"props":706,"children":708},{"className":707},[],[709],{"type":54,"value":710},"span",{"type":54,"value":712}," element. ",{"type":45,"tag":714,"props":715,"children":716},"strong",{},[717],{"type":54,"value":718},"This is a problem",{"type":54,"value":99},{"type":45,"tag":50,"props":721,"children":722},{},[723,725,730],{"type":54,"value":724},"Rather than trying to hack together a way to get ",{"type":45,"tag":276,"props":726,"children":727},{},[728],{"type":54,"value":729},"most",{"type":54,"value":731}," of the directors videos, I chose to get the list of directors and gather their movie lists from a reliable source.",{"type":45,"tag":50,"props":733,"children":734},{},[735,737,744],{"type":54,"value":736},"I chose IMDB's which has a convenient python wrapper around their API ",{"type":45,"tag":57,"props":738,"children":741},{"href":739,"rel":740},"https://imdbpy.github.io/",[61],[742],{"type":54,"value":743},"IMDbPY",{"type":54,"value":99},{"type":45,"tag":119,"props":746,"children":748},{"id":747},"why-did-i-pick-selenium-as-the-tool-for-this",[749],{"type":54,"value":750},"Why did I pick Selenium as the Tool for this?",{"type":45,"tag":50,"props":752,"children":753},{},[754],{"type":54,"value":755},"Dany is a beginner web developer and is curious about Python. Selenium provides the developer with visual confirmation with the automated browser interactions. Spawning a new browser instance and clicking through the site does impact performance, but I believe the benefits of the visual aspect of Selenium out-weighs the performance issues.",{"type":45,"tag":50,"props":757,"children":758},{},[759,761,768],{"type":54,"value":760},"A framework such as ",{"type":45,"tag":57,"props":762,"children":765},{"href":763,"rel":764},"https://scrapy.org/",[61],[766],{"type":54,"value":767},"Scrapy",{"type":54,"value":769}," would provide the data quicker, but a big reason I'm building this is to help Dany learn Python.",{"type":45,"tag":119,"props":771,"children":773},{"id":772},"setting-up-selenium-to-automate-my-browser",[774],{"type":54,"value":775},"Setting up Selenium to Automate my Browser",{"type":45,"tag":50,"props":777,"children":778},{},[779],{"type":54,"value":780},"Selenium takes a bit of setting up in order to start automating your browser.",{"type":45,"tag":50,"props":782,"children":783},{},[784,786,793,795,801],{"type":54,"value":785},"Using Python 3's built in package manager ",{"type":45,"tag":57,"props":787,"children":790},{"href":788,"rel":789},"https://pypi.org/project/pip/",[61],[791],{"type":54,"value":792},"pip",{"type":54,"value":794},", download Selenium with the command ",{"type":45,"tag":267,"props":796,"children":798},{"className":797},[],[799],{"type":54,"value":800},"pip install selenium",{"type":54,"value":99},{"type":45,"tag":46,"props":803,"children":804},{},[805],{"type":45,"tag":50,"props":806,"children":807},{},[808,810,817],{"type":54,"value":809},"I highly recommend taking advantage of a ",{"type":45,"tag":57,"props":811,"children":814},{"href":812,"rel":813},"https://virtualenv.pypa.io/en/latest/",[61],[815],{"type":54,"value":816},"virtualenv",{"type":54,"value":818}," and creating an isolated Python environment.",{"type":45,"tag":50,"props":820,"children":821},{},[822,824,831,833,840],{"type":54,"value":823},"You will also need to download the appropriate web driver. Selenium's ",{"type":45,"tag":57,"props":825,"children":828},{"href":826,"rel":827},"https://selenium-python.readthedocs.io/installation.html#drivers",[61],[829],{"type":54,"value":830},"documentation",{"type":54,"value":832}," has links to the most popular browser drivers. For this tutorial, I will be using Google Chrome and ",{"type":45,"tag":57,"props":834,"children":837},{"href":835,"rel":836},"https://sites.google.com/chromium.org/driver/",[61],[838],{"type":54,"value":839},"Chromedriver",{"type":54,"value":99},{"type":45,"tag":119,"props":842,"children":844},{"id":843},"using-selenium-and-python-to-gather-the-directors",[845],{"type":54,"value":846},"Using Selenium and Python to Gather the Directors",{"type":45,"tag":50,"props":848,"children":849},{},[850],{"type":54,"value":851},"Below is the code snippet I decided to use. I've appended numbers comments to describe important choices made within the snippet.",{"type":45,"tag":319,"props":853,"children":856},{"className":854,"code":855,"language":18,"meta":6},[322],"import json\nfrom selenium import webdriver\n\ndriver = webdriver.Chrome('chromedriver') // 1\ndriver.get('https://www.elacervo.com/directores') // 2\n\n// 3\nfor i in range(4):\n  time.sleep(5)\n  driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n\n// 4\ndirectors = driver.find_elements_by_css_selector(\n  \"a[href*='https://www.elacervo.com/post/']\"\n  )\n\n// 5\nunique_directors = []\nfor link in directors:\n  if (link.get_attribute(\"href\")) not in unique_directors:\n    unique_directors.append(link.get_attribute(\"href\"))\n\n// 6\nnames = []\nfor link in unique_directors:\n  slug = link.split('/')[-1]\n  name = slug.replace('-', ' ').title()\n  names.append({\"name\": name})\n\n// 7\nwith open('directors.json', 'w') as outfile:\n  json.dump(names, outfile)\n\n// 8\ndriver.quit()\n",[857],{"type":45,"tag":267,"props":858,"children":859},{"__ignoreMap":6},[860],{"type":54,"value":855},{"type":45,"tag":862,"props":863,"children":864},"ol",{},[865,892,909,914,957,977,1006,1041],{"type":45,"tag":179,"props":866,"children":867},{},[868,874,876,882,884,890],{"type":45,"tag":267,"props":869,"children":871},{"className":870},[],[872],{"type":54,"value":873},"driver = webdriver.Chrome('chromedriver')",{"type":54,"value":875}," - This is where we are telling Selenium to use spawn a new Google Chrome instance. The value, ",{"type":45,"tag":267,"props":877,"children":879},{"className":878},[],[880],{"type":54,"value":881},"chromedriver",{"type":54,"value":883},", that we are passing to the ",{"type":45,"tag":267,"props":885,"children":887},{"className":886},[],[888],{"type":54,"value":889},".Chrome()",{"type":54,"value":891}," method is the location of the chromedriver file we downloaded in the previous step.",{"type":45,"tag":179,"props":893,"children":894},{},[895,901,903,908],{"type":45,"tag":267,"props":896,"children":898},{"className":897},[],[899],{"type":54,"value":900},"driver.get('https://www.elacervo.com/directores')",{"type":54,"value":902}," - Here we are telling our now made Selenium driver to navigate to the URL ",{"type":45,"tag":267,"props":904,"children":906},{"className":905},[],[907],{"type":54,"value":647},{"type":54,"value":99},{"type":45,"tag":179,"props":910,"children":911},{},[912],{"type":54,"value":913},"The website I am scraping has some lazy-loading logic where only a certain number of directors are loaded until the page is scrolled to the bottom. This is executing some client-side javascript to scroll to the bottom of the page, wait a few seconds for the new directors to load, then scroll to the new bottom of the page.",{"type":45,"tag":179,"props":915,"children":916},{},[917,919,924,926,932,934,940,942,948,950,956],{"type":54,"value":918},"Here I am gathering all of the html events that contain an ",{"type":45,"tag":267,"props":920,"children":922},{"className":921},[],[923],{"type":54,"value":57},{"type":54,"value":925}," tag with and ",{"type":45,"tag":267,"props":927,"children":929},{"className":928},[],[930],{"type":54,"value":931},"href",{"type":54,"value":933}," that contains ",{"type":45,"tag":267,"props":935,"children":937},{"className":936},[],[938],{"type":54,"value":939},"https://www.elacervo.com/post/",{"type":54,"value":941},". This is using the logic ",{"type":45,"tag":267,"props":943,"children":945},{"className":944},[],[946],{"type":54,"value":947},"href*=",{"type":54,"value":949}," which includes the wildcard character ",{"type":45,"tag":267,"props":951,"children":953},{"className":952},[],[954],{"type":54,"value":955},"*",{"type":54,"value":99},{"type":45,"tag":179,"props":958,"children":959},{},[960,962,967,969,975],{"type":54,"value":961},"This is extracting the directors URL that is inside the ",{"type":45,"tag":267,"props":963,"children":965},{"className":964},[],[966],{"type":54,"value":931},{"type":54,"value":968}," source. It's then placing the URL into a ",{"type":45,"tag":267,"props":970,"children":972},{"className":971},[],[973],{"type":54,"value":974},"unique_directors",{"type":54,"value":976}," list. Some of the directors on this page have their link twice so I'm removing any duplicate URLs.",{"type":45,"tag":179,"props":978,"children":979},{},[980,982,988,990,996,998,1004],{"type":54,"value":981},"I'm cleaning the URL links to simply get the directors names from them. The links gathered look like ",{"type":45,"tag":267,"props":983,"children":985},{"className":984},[],[986],{"type":54,"value":987},"https://www.elacervo.com/post/martin-scorsese",{"type":54,"value":989},". The logic here is taking everything after the last ",{"type":45,"tag":267,"props":991,"children":993},{"className":992},[],[994],{"type":54,"value":995},"/",{"type":54,"value":997}," character, replacing ",{"type":45,"tag":267,"props":999,"children":1001},{"className":1000},[],[1002],{"type":54,"value":1003},"-",{"type":54,"value":1005},"'s with spaces, and then capitalizing the first letter of each word within their names.",{"type":45,"tag":179,"props":1007,"children":1008},{},[1009,1011,1017,1019,1025,1027,1032,1034,1039],{"type":54,"value":1010},"I then using ",{"type":45,"tag":267,"props":1012,"children":1014},{"className":1013},[],[1015],{"type":54,"value":1016},"json.dump",{"type":54,"value":1018}," to write the gathered director names into a ",{"type":45,"tag":267,"props":1020,"children":1022},{"className":1021},[],[1023],{"type":54,"value":1024},"json",{"type":54,"value":1026}," file for quicker use later on. Reading from a ",{"type":45,"tag":267,"props":1028,"children":1030},{"className":1029},[],[1031],{"type":54,"value":1024},{"type":54,"value":1033}," file is ",{"type":45,"tag":714,"props":1035,"children":1036},{},[1037],{"type":54,"value":1038},"much quicker",{"type":54,"value":1040}," than spawning a browser to click around and extract data.",{"type":45,"tag":179,"props":1042,"children":1043},{},[1044,1050],{"type":45,"tag":267,"props":1045,"children":1047},{"className":1046},[],[1048],{"type":54,"value":1049},"driver.quit()",{"type":54,"value":1051}," - This closes the a Selenium Chrome instance.",{"type":45,"tag":119,"props":1053,"children":1055},{"id":1054},"using-imdbpy-to-query-imdbs-database",[1056],{"type":54,"value":1057},"Using IMDbPY to Query IMDBs Database",{"type":45,"tag":50,"props":1059,"children":1060},{},[1061,1066],{"type":45,"tag":57,"props":1062,"children":1064},{"href":739,"rel":1063},[61],[1065],{"type":54,"value":743},{"type":54,"value":1067}," is a pretty neat package for querying IMDB's data. With only a few lines of Python, we can see the entire filmography of a directory.",{"type":45,"tag":1069,"props":1070,"children":1072},"h3",{"id":1071},"this-python-snippet-will-return-every-film-for-each-director",[1073],{"type":54,"value":1074},"This Python Snippet Will Return Every Film for Each Director",{"type":45,"tag":319,"props":1076,"children":1079},{"className":1077,"code":1078,"language":18,"meta":6},[322],"import json\nfrom imdb import IMDb\n\nfile = open('directors.json',)\ndirectors = json.load(file)\n\nmovies = []\nia = IMDb()\nfor person in directors:\n  try:\n    director = ia.search_person(person['name'])[0]\n    try:\n      films = ia.get_person_filmography(director.personID)['data']['filmography']['director']\n      for film in films:\n        if film['kind'] == 'movie':\n          try:\n            if (film['year']):\n              movies.append(film)\n          except KeyError:\n            continue\n    except AttributeError:\n      continue\n  except IndexError:\n    continue\n\n  with open('movies.json', 'w') as outfile:\n    json.dump([{\"title\": movie['title'], 'year': movie['year']} for movie in movies], outfile)\n",[1080],{"type":45,"tag":267,"props":1081,"children":1082},{"__ignoreMap":6},[1083],{"type":54,"value":1078},{"type":45,"tag":50,"props":1085,"children":1086},{},[1087,1089,1096,1098,1104,1106,1113],{"type":54,"value":1088},"We use Python's built in ",{"type":45,"tag":57,"props":1090,"children":1093},{"href":1091,"rel":1092},"https://docs.python.org/3/library/functions.html#open",[61],[1094],{"type":54,"value":1095},"open",{"type":54,"value":1097}," function to open the ",{"type":45,"tag":267,"props":1099,"children":1101},{"className":1100},[],[1102],{"type":54,"value":1103},"directors.json",{"type":54,"value":1105}," file we created in the Selenium section. Then using Python's ",{"type":45,"tag":57,"props":1107,"children":1110},{"href":1108,"rel":1109},"https://docs.python.org/3/library/json.html",[61],[1111],{"type":54,"value":1112},"JSON decoder",{"type":54,"value":1114},", we can load data from the file into a usable JSON format.",{"type":45,"tag":50,"props":1116,"children":1117},{},[1118],{"type":54,"value":1119},"Initializing an IMDb object gives us access to the packages functions, allowing us to query IMDb's database.",{"type":45,"tag":50,"props":1121,"children":1122},{},[1123,1125,1131,1133,1139],{"type":54,"value":1124},"The method ",{"type":45,"tag":267,"props":1126,"children":1128},{"className":1127},[],[1129],{"type":54,"value":1130},".search_person(person['name'])",{"type":54,"value":1132}," returns a list of people IMDb has within in their database. It appears the first result in the returned list is the most popular and reasoning behind the ",{"type":45,"tag":267,"props":1134,"children":1136},{"className":1135},[],[1137],{"type":54,"value":1138},"[0]",{"type":54,"value":1140},". For this project, I'm making the assumption that is the director I want to work with.",{"type":45,"tag":1069,"props":1142,"children":1144},{"id":1143},"differentiating-movie-from-other-film-types",[1145],{"type":54,"value":1146},"Differentiating Movie From Other Film Types",{"type":45,"tag":50,"props":1148,"children":1149},{},[1150,1152,1158,1160,1166],{"type":54,"value":1151},"IMDbPY ",{"type":45,"tag":267,"props":1153,"children":1155},{"className":1154},[],[1156],{"type":54,"value":1157},"Movie",{"type":54,"value":1159}," objects properties can be seen documented ",{"type":45,"tag":57,"props":1161,"children":1164},{"href":1162,"rel":1163},"https://imdbpy.readthedocs.io/en/latest/usage/movie.html",[61],[1165],{"type":54,"value":64},{"type":54,"value":1167},". For this project, I'm just interested in movies, so I apply a conditional to check, appending the accepted films to a movies list.",{"type":45,"tag":50,"props":1169,"children":1170},{},[1171,1173,1179,1181,1187],{"type":54,"value":1172},"It turns out that IMDbPY's Movie object only has the property ",{"type":45,"tag":267,"props":1174,"children":1176},{"className":1175},[],[1177],{"type":54,"value":1178},"year",{"type":54,"value":1180}," if the movie has been released, otherwise, it has the property ",{"type":45,"tag":267,"props":1182,"children":1184},{"className":1183},[],[1185],{"type":54,"value":1186},"status",{"type":54,"value":1188},". I only want movies that are watchable now, and filter out the data accordingly.",{"type":45,"tag":319,"props":1190,"children":1193},{"className":1191,"code":1192,"language":18,"meta":6},[322],"movies = []\nif film['kind'] == 'movie':\n    try:\n        if (film['year']):\n            movies.append(film)\n    except KeyError:\n        continue\n",[1194],{"type":45,"tag":267,"props":1195,"children":1196},{"__ignoreMap":6},[1197],{"type":54,"value":1192},{"type":45,"tag":1069,"props":1199,"children":1201},{"id":1200},"writing-the-movie-data-to-a-reusable-json-file",[1202],{"type":54,"value":1203},"Writing the Movie Data to a Reusable JSON File",{"type":45,"tag":50,"props":1205,"children":1206},{},[1207],{"type":54,"value":1208},"Like the data extracted using Selenium, I decided to reduce the number of API requests to IMDb by writing the acquired data into a reusable JSON file.",{"type":45,"tag":50,"props":1210,"children":1211},{},[1212],{"type":54,"value":1213},"Rather than extracting all of the IMDb Movie object's data, I decided to simply take the movie's title and year values. In the future, it could be cool to extract additional data allowing for advanced filtering. For example, wanting to only watch a movie between the years 1970 and 1980 with a rating greater than 9.0. Although the IMDb Movie object said it has certain properties, it ended up being a bit finicky and I decided against it for now.",{"type":45,"tag":319,"props":1215,"children":1218},{"className":1216,"code":1217,"language":18,"meta":6},[322],"with open('movies.json', 'w') as outfile:\n    json.dump([{\"title\": movie['title'], 'year': movie['year']} for movie in movies], outfile)\n",[1219],{"type":45,"tag":267,"props":1220,"children":1221},{"__ignoreMap":6},[1222],{"type":54,"value":1217},{"type":45,"tag":1069,"props":1224,"children":1226},{"id":1225},"randomly-selecting-the-movie-from-our-list",[1227],{"type":54,"value":1228},"Randomly Selecting the Movie From Our List",{"type":45,"tag":50,"props":1230,"children":1231},{},[1232,1234,1241],{"type":54,"value":1233},"Now that we have a list of all of the movies from our group of directors in a json file, I can use Python's ",{"type":45,"tag":57,"props":1235,"children":1238},{"href":1236,"rel":1237},"https://docs.python.org/3/library/random.html#random.choice",[61],[1239],{"type":54,"value":1240},"random.choice",{"type":54,"value":1242}," to randomly select a movie.",{"type":45,"tag":319,"props":1244,"children":1247},{"className":1245,"code":1246,"language":18,"meta":6},[322],"import random\nimport json\n\nfile = open('movies.json')\ndata = json.load(file)\nprint(random.choice(data))\n",[1248],{"type":45,"tag":267,"props":1249,"children":1250},{"__ignoreMap":6},[1251],{"type":54,"value":1246},{"type":45,"tag":119,"props":1253,"children":1255},{"id":1254},"random-movie-watching-is-fun",[1256],{"type":54,"value":1257},"Random Movie Watching is fun!",{"type":45,"tag":50,"props":1259,"children":1260},{},[1261,1266],{"type":45,"tag":714,"props":1262,"children":1263},{},[1264],{"type":54,"value":1265},"Seriously",{"type":54,"value":1267}," give it a shot. At the very least, randomly select a movie and watch its trailer. Many of these movies I had never heard of but they are fascinating, creative and artistic.",{"type":45,"tag":50,"props":1269,"children":1270},{},[1271],{"type":54,"value":1272},"I hope this article was helpful!",{"title":6,"searchDepth":588,"depth":588,"links":1274},[1275,1276,1277,1278,1279,1286],{"id":673,"depth":588,"text":676},{"id":747,"depth":588,"text":750},{"id":772,"depth":588,"text":775},{"id":843,"depth":588,"text":846},{"id":1054,"depth":588,"text":1057,"children":1280},[1281,1283,1284,1285],{"id":1071,"depth":1282,"text":1074},3,{"id":1143,"depth":1282,"text":1146},{"id":1200,"depth":1282,"text":1203},{"id":1225,"depth":1282,"text":1228},{"id":1254,"depth":588,"text":1257},"content:selenium-movie-picker.md","selenium-movie-picker.md","selenium-movie-picker",1734028853070]