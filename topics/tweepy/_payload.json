[{"data":1,"prerenderedAt":604},["ShallowReactive",2],{"post-/topics/tweepy":3},[4],{"_path":5,"_dir":6,"_draft":7,"_partial":7,"_locale":6,"title":8,"description":9,"type":10,"author":11,"date":14,"category":15,"dropdown":16,"topics":17,"meta":22,"canonicalUrl":38,"newsletter":7,"created_at":39,"last_modified":40,"body":41,"_type":598,"_id":599,"_source":600,"_file":601,"_stem":602,"_extension":603},"/generate-twitter-lists-with-python","",false,"Generating Twitter Lists with Python",null,"post",{"name":12,"image":13},"Cody Bontecou","https://codybontecou.com/images/cody-abstract.jpeg","2020-09-15T00:00:00.000Z","tutorials","Python",[18,19,20,21],"python","tweepy","twitter","automation",[23,25,28,31,33,35],{"name":24,"content":8},"og:title",{"name":26,"content":27},"og:description","Automatically generating a Twitter List of Paul Grahams feed with Python and Tweepy",{"name":29,"content":30},"og:image","https://codybontecou.com/images/generate-twitter-lists-with-python-meta.png",{"name":32,"content":27},"og:image:alt",{"name":34,"content":8},"twitter:title",{"name":36,"content":37},"twitter:text:title","Generating a Twitter List with Python","https://codybontecou.com/generate-twitter-lists-with-python.html","2024-10-31T14:26","2024-11-09T21:19",{"type":42,"children":43,"toc":587},"root",[44,65,77,100,105,118,125,133,138,143,149,164,169,174,239,245,261,318,329,335,355,364,369,375,380,409,421,430,436,440,459,472,493,502,508,512,523,536,541,553,562,568,582],{"type":45,"tag":46,"props":47,"children":48},"element","blockquote",{},[49],{"type":45,"tag":50,"props":51,"children":52},"p",{},[53,56],{"type":54,"value":55},"text","The finished project can be seen ",{"type":45,"tag":57,"props":58,"children":62},"a",{"href":59,"rel":60},"https://github.com/CodyBontecou/Generating-Twitter-Lists-with-Python/blob/main/tweepy_lists/app.py",[61],"nofollow",[63],{"type":54,"value":64},"here",{"type":45,"tag":50,"props":66,"children":67},{},[68,75],{"type":45,"tag":57,"props":69,"children":72},{"href":70,"rel":71},"https://twitter.com/paulg",[61],[73],{"type":54,"value":74},"Paul Graham",{"type":54,"value":76}," is an influential man in the tech and startup space.",{"type":45,"tag":50,"props":78,"children":79},{},[80,82,89,91,98],{"type":54,"value":81},"His Twitter activity keeps me entertained and informed, spanning from discussions about ",{"type":45,"tag":57,"props":83,"children":86},{"href":84,"rel":85},"https://twitter.com/paulg/status/1437423926980841472",[61],[87],{"type":54,"value":88},"air quality significantly impacting life expectancy",{"type":54,"value":90}," to interesting ",{"type":45,"tag":57,"props":92,"children":95},{"href":93,"rel":94},"https://twitter.com/paulg/status/1437453828606070784",[61],[96],{"type":54,"value":97},"discussions he has with his kids",{"type":54,"value":99},".",{"type":45,"tag":50,"props":101,"children":102},{},[103],{"type":54,"value":104},"The air pollution discussion this morning motivated me to want to see his feed and all of the interesting things a man like Paul sees. I started to follow the accounts he follows and after about 30 or so clicks I decided to investigate Twitter's API for a way to automate this.",{"type":45,"tag":50,"props":106,"children":107},{},[108,110,117],{"type":54,"value":109},"This is where I discovered ",{"type":45,"tag":57,"props":111,"children":114},{"href":112,"rel":113},"https://help.twitter.com/en/using-twitter/twitter-lists",[61],[115],{"type":54,"value":116},"Twitter Lists",{"type":54,"value":99},{"type":45,"tag":119,"props":120,"children":122},"h2",{"id":121},"twitter-lists-are-a-great-way-to-create-custom-feeds",[123],{"type":54,"value":124},"Twitter Lists are a great way to create custom feeds",{"type":45,"tag":46,"props":126,"children":127},{},[128],{"type":45,"tag":50,"props":129,"children":130},{},[131],{"type":54,"value":132},"Viewing a List timeline will show you a stream of Tweets from only the accounts on that List.",{"type":45,"tag":50,"props":134,"children":135},{},[136],{"type":54,"value":137},"Twitter Lists are the perfect solution. It gives me the ability to create custom feeds.",{"type":45,"tag":50,"props":139,"children":140},{},[141],{"type":54,"value":142},"If I feel like delving into Paul Grahams feed, it's a click away. Same with Elon Musk or any of the other influential users on Twitter.",{"type":45,"tag":119,"props":144,"children":146},{"id":145},"using-tweepy-to-automatically-generate-our-twitter-lists",[147],{"type":54,"value":148},"Using Tweepy to automatically generate our Twitter Lists",{"type":45,"tag":46,"props":150,"children":151},{},[152],{"type":45,"tag":50,"props":153,"children":154},{},[155,162],{"type":45,"tag":57,"props":156,"children":159},{"href":157,"rel":158},"https://www.tweepy.org/",[61],[160],{"type":54,"value":161},"Tweepy",{"type":54,"value":163}," is an easy-to-use Python library for accessing the Twitter API.",{"type":45,"tag":50,"props":165,"children":166},{},[167],{"type":54,"value":168},"Tweepy provides built in methods to easily interact with the Twitter API.",{"type":45,"tag":50,"props":170,"children":171},{},[172],{"type":54,"value":173},"In this project, I use the following from Tweepy:",{"type":45,"tag":175,"props":176,"children":177},"ul",{},[178,189,199,209,219,229],{"type":45,"tag":179,"props":180,"children":181},"li",{},[182],{"type":45,"tag":57,"props":183,"children":186},{"href":184,"rel":185},"https://docs.tweepy.org/en/stable/api.html?highlight=API#API",[61],[187],{"type":54,"value":188},"API class",{"type":45,"tag":179,"props":190,"children":191},{},[192],{"type":45,"tag":57,"props":193,"children":196},{"href":194,"rel":195},"https://docs.tweepy.org/en/latest/client.html",[61],[197],{"type":54,"value":198},"Client class",{"type":45,"tag":179,"props":200,"children":201},{},[202],{"type":45,"tag":57,"props":203,"children":206},{"href":204,"rel":205},"https://docs.tweepy.org/en/latest/api.html?highlight=create_list#tweepy.API.create_list",[61],[207],{"type":54,"value":208},".create_list()",{"type":45,"tag":179,"props":210,"children":211},{},[212],{"type":45,"tag":57,"props":213,"children":216},{"href":214,"rel":215},"https://docs.tweepy.org/en/v3.10.0/api.html?highlight=get_user#API.get_user",[61],[217],{"type":54,"value":218},".get_user()",{"type":45,"tag":179,"props":220,"children":221},{},[222],{"type":45,"tag":57,"props":223,"children":226},{"href":224,"rel":225},"https://docs.tweepy.org/en/latest/client.html?highlight=get_users_following#tweepy.client.get_users_following",[61],[227],{"type":54,"value":228},".get_users_following()",{"type":45,"tag":179,"props":230,"children":231},{},[232],{"type":45,"tag":57,"props":233,"children":236},{"href":234,"rel":235},"https://docs.tweepy.org/en/latest/api.html?highlight=add_list_members#tweepy.api.add_list_members",[61],[237],{"type":54,"value":238},".add_list_members",{"type":45,"tag":119,"props":240,"children":242},{"id":241},"authenticating-with-twitters-api-using-tweepy",[243],{"type":54,"value":244},"Authenticating with Twitter's API using Tweepy",{"type":45,"tag":46,"props":246,"children":247},{},[248],{"type":45,"tag":50,"props":249,"children":250},{},[251,253,259],{"type":54,"value":252},"This tutorial will assume you already have a Twitter developer account. If you do not, I went into detail ",{"type":45,"tag":57,"props":254,"children":257},{"href":255,"rel":256},"https://codybontecou.com/programmatically-tweeting-with-nodejs.html#getting-authenticated",[61],[258],{"type":54,"value":64},{"type":54,"value":260}," on how to generate the proper authentication keys needed to access Twitter's API.",{"type":45,"tag":50,"props":262,"children":263},{},[264,266,273,275,281,283,288,290,296,298,303,304,309,311,317],{"type":54,"value":265},"Tweepy provides the helper function ",{"type":45,"tag":267,"props":268,"children":270},"code",{"className":269},[],[271],{"type":54,"value":272},".OAuthHandler",{"type":54,"value":274}," that requires you to pass it your ",{"type":45,"tag":276,"props":277,"children":278},"em",{},[279],{"type":54,"value":280},"consumer key",{"type":54,"value":282}," and ",{"type":45,"tag":276,"props":284,"children":285},{},[286],{"type":54,"value":287},"consumer secret",{"type":54,"value":289}," initializing the auth object, you then must call its method ",{"type":45,"tag":267,"props":291,"children":293},{"className":292},[],[294],{"type":54,"value":295},".set_access_token()",{"type":54,"value":297}," which requires your ",{"type":45,"tag":276,"props":299,"children":300},{},[301],{"type":54,"value":302},"access token",{"type":54,"value":282},{"type":45,"tag":276,"props":305,"children":306},{},[307],{"type":54,"value":308},"access token secret",{"type":54,"value":310}," given to you when creating your developer account and ",{"type":45,"tag":57,"props":312,"children":314},{"href":255,"rel":313},[61],[315],{"type":54,"value":316},"generating your app",{"type":54,"value":99},{"type":45,"tag":319,"props":320,"children":324},"pre",{"className":321,"code":323,"language":18,"meta":6},[322],"language-python","import tweepy\n\nauth = tweepy.OAuthHandler(os.getenv(\"consumer_key\"), os.getenv(\"consumer_secret\"))\nauth.set_access_token(os.getenv(\"access_token\"), os.getenv(\"access_token_secret\"))\n",[325],{"type":45,"tag":267,"props":326,"children":327},{"__ignoreMap":6},[328],{"type":54,"value":323},{"type":45,"tag":119,"props":330,"children":332},{"id":331},"initializing-tweepys-api-and-client-objects",[333],{"type":54,"value":334},"Initializing Tweepy's API and Client objects",{"type":45,"tag":50,"props":336,"children":337},{},[338,340,346,347,353],{"type":54,"value":339},"We can now utilize our auth variable to create ",{"type":45,"tag":57,"props":341,"children":343},{"href":184,"rel":342},[61],[344],{"type":54,"value":345},"API",{"type":54,"value":282},{"type":45,"tag":57,"props":348,"children":350},{"href":194,"rel":349},[61],[351],{"type":54,"value":352},"Client",{"type":54,"value":354}," objects using the following code:",{"type":45,"tag":319,"props":356,"children":359},{"className":357,"code":358,"language":18,"meta":6},[322],"api = tweepy.API(auth)\nclient = tweepy.Client(\n    bearer_token=os.getenv(\"bearer_token\"),\n    consumer_key=os.getenv(\"consumer_key\"),\n    consumer_secret=os.getenv(\"consumer_secret\"),\n    access_token=os.getenv(\"access_token\"),\n    access_token_secret=os.getenv(\"access_token_secret\"),\n    wait_on_rate_limit=True,\n)\n",[360],{"type":45,"tag":267,"props":361,"children":362},{"__ignoreMap":6},[363],{"type":54,"value":358},{"type":45,"tag":50,"props":365,"children":366},{},[367],{"type":54,"value":368},"With these objects, we can now access every Twitter endpoint.",{"type":45,"tag":119,"props":370,"children":372},{"id":371},"creating-a-list-using-tweepys-api",[373],{"type":54,"value":374},"Creating a List using Tweepy's API",{"type":45,"tag":50,"props":376,"children":377},{},[378],{"type":54,"value":379},"Tweepy methods used:",{"type":45,"tag":175,"props":381,"children":382},{},[383],{"type":45,"tag":179,"props":384,"children":385},{},[386,391,393,399,401,407],{"type":45,"tag":57,"props":387,"children":389},{"href":204,"rel":388},[61],[390],{"type":54,"value":208},{"type":54,"value":392},": Takes three parameters: name, mode, and description. Name and description are self-explanatory and mode can either be ",{"type":45,"tag":267,"props":394,"children":396},{"className":395},[],[397],{"type":54,"value":398},"\"public\"",{"type":54,"value":400}," or ",{"type":45,"tag":267,"props":402,"children":404},{"className":403},[],[405],{"type":54,"value":406},"\"private\"",{"type":54,"value":408}," to define the visibility status of the List.",{"type":45,"tag":50,"props":410,"children":411},{},[412,414,420],{"type":54,"value":413},"The response from a successfully List creation returns the List data. I will be using this list later on, so I decided to extract it's id into the variable ",{"type":45,"tag":267,"props":415,"children":417},{"className":416},[],[418],{"type":54,"value":419},"list_id",{"type":54,"value":99},{"type":45,"tag":319,"props":422,"children":425},{"className":423,"code":424,"language":18,"meta":6},[322],"list_name = \"Paul Grahams's Feed\"\nlist_description = \"A list of everyone Paul Graham follows\"\n\ntwitter_list = api.create_list(name=list_name, description=list_description)\nlist_id = twitter_list._json[\"id\"]\n",[426],{"type":45,"tag":267,"props":427,"children":428},{"__ignoreMap":6},[429],{"type":54,"value":424},{"type":45,"tag":119,"props":431,"children":433},{"id":432},"getting-a-user-and-the-accounts-they-follow",[434],{"type":54,"value":435},"Getting a User and the accounts they follow",{"type":45,"tag":50,"props":437,"children":438},{},[439],{"type":54,"value":379},{"type":45,"tag":175,"props":441,"children":442},{},[443,451],{"type":45,"tag":179,"props":444,"children":445},{},[446],{"type":45,"tag":57,"props":447,"children":449},{"href":214,"rel":448},[61],[450],{"type":54,"value":218},{"type":45,"tag":179,"props":452,"children":453},{},[454],{"type":45,"tag":57,"props":455,"children":457},{"href":224,"rel":456},[61],[458],{"type":54,"value":228},{"type":45,"tag":50,"props":460,"children":461},{},[462,464,470],{"type":54,"value":463},"By passing ",{"type":45,"tag":267,"props":465,"children":467},{"className":466},[],[468],{"type":54,"value":469},"client.get_user()",{"type":54,"value":471}," a twitter handle - in this case, Paul Graham - I can get all of the public data Twitter provides regarding that user.",{"type":45,"tag":50,"props":473,"children":474},{},[475,477,483,485,491],{"type":54,"value":476},"I then use that user's data with ",{"type":45,"tag":267,"props":478,"children":480},{"className":479},[],[481],{"type":54,"value":482},"client.get_users_following()",{"type":54,"value":484}," alongside max_results. The argument ",{"type":45,"tag":267,"props":486,"children":488},{"className":487},[],[489],{"type":54,"value":490},"max_results",{"type":54,"value":492}," defines how many user objects Twitter will pass back. In this case, I used the max of 1000. The default is 100.",{"type":45,"tag":319,"props":494,"children":497},{"className":495,"code":496,"language":18,"meta":6},[322],"twitter_handle = \"paulg\"\nuser = client.get_user(username=twitter_handle)\n\nfollowers = client.get_users_following(id=user.data.id, max_results=1000)\n",[498],{"type":45,"tag":267,"props":499,"children":500},{"__ignoreMap":6},[501],{"type":54,"value":496},{"type":45,"tag":119,"props":503,"children":505},{"id":504},"automatially-adding-users-to-the-list",[506],{"type":54,"value":507},"Automatially adding users to the list",{"type":45,"tag":50,"props":509,"children":510},{},[511],{"type":54,"value":379},{"type":45,"tag":175,"props":513,"children":514},{},[515],{"type":45,"tag":179,"props":516,"children":517},{},[518],{"type":45,"tag":57,"props":519,"children":521},{"href":234,"rel":520},[61],[522],{"type":54,"value":238},{"type":45,"tag":50,"props":524,"children":525},{},[526,528,534],{"type":54,"value":527},"Now that we have the List we want to populate and the followers we want populate it with, we use the ",{"type":45,"tag":267,"props":529,"children":531},{"className":530},[],[532],{"type":54,"value":533},"api.add_list_members()",{"type":54,"value":535}," method.",{"type":45,"tag":50,"props":537,"children":538},{},[539],{"type":54,"value":540},"This method takes a list of up to 100 Twitter User ID's. The code snippet below chunks out follower data into sections of 100 Users and generates a list of ids to pass.",{"type":45,"tag":50,"props":542,"children":543},{},[544,546,551],{"type":54,"value":545},"We are also passing this method the ",{"type":45,"tag":267,"props":547,"children":549},{"className":548},[],[550],{"type":54,"value":419},{"type":54,"value":552}," that was saved when we created the list.",{"type":45,"tag":319,"props":554,"children":557},{"className":555,"code":556,"language":18,"meta":6},[322],"for i in range(0, len(followers.data), 100):\n    ids = [follower[\"id\"] for follower in followers.data[i : i + 100]]\n    api.add_list_members(list_id=list_id, user_id=ids)\n",[558],{"type":45,"tag":267,"props":559,"children":560},{"__ignoreMap":6},[561],{"type":54,"value":556},{"type":45,"tag":119,"props":563,"children":565},{"id":564},"things-to-keep-in-mind-when-working-with-twitters-api",[566],{"type":54,"value":567},"Things to keep in mind when working with Twitter's API",{"type":45,"tag":50,"props":569,"children":570},{},[571,573,580],{"type":54,"value":572},"Twitter rate limits just about all of their endpoints. ",{"type":45,"tag":57,"props":574,"children":577},{"href":575,"rel":576},"https://developer.twitter.com/en/docs/twitter-api/v1/rate-limits",[61],[578],{"type":54,"value":579},"Here",{"type":54,"value":581}," is Twitter's documentation on what the rate limits are. Keep this is mind when developing Twitter-based applications because you may find yourself with an odd error.",{"type":45,"tag":50,"props":583,"children":584},{},[585],{"type":54,"value":586},"Thank you for reading! I hope you enjoyed it.",{"title":6,"searchDepth":588,"depth":588,"links":589},2,[590,591,592,593,594,595,596,597],{"id":121,"depth":588,"text":124},{"id":145,"depth":588,"text":148},{"id":241,"depth":588,"text":244},{"id":331,"depth":588,"text":334},{"id":371,"depth":588,"text":374},{"id":432,"depth":588,"text":435},{"id":504,"depth":588,"text":507},{"id":564,"depth":588,"text":567},"markdown","content:generate-twitter-lists-with-python.md","content","generate-twitter-lists-with-python.md","generate-twitter-lists-with-python","md",1732285421122]