{"_path":"/cypress-component-testing-with-nuxt-3","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Cypress Component Testing with Nuxt 3","description":"Showing the setup needed to get Cypress Component Testing working alongside Nuxt 3","type":"post","author":{"name":"Cody Bontecou","image":"https://codybontecou.com/images/cody-abstract.jpeg"},"date":"2023-03-20","last_modified_date":"2023-03-20","slug":"cypress-component-testing-with-nuxt-3","dropdown":"Cypress","meta":[{"name":"og:description","content":"Showing the setup needed to get Cypress Component Testing working alongside Nuxt 3"},{"name":"og:image","content":"https://codybontecou.com/images/cypress-component-testing-with-nuxt-3.png"},{"name":"og:image:alt","content":"Showing the setup needed to get Cypress Component Testing working alongside Nuxt 3"},{"name":"og:title","content":"Cypress Component Testing with Nuxt 3"},{"name":"twitter:title","content":"Cypress Component Testing with Nuxt 3"},{"name":"twitter:text:title","content":"Cypress Component Testing with Nuxt 3"}],"canonicalUrl":"https://codybontecou.com/cypress-component-testing-with-nuxt-3.html","topics":["Testing","Nuxt","Cypress"],"created_at":"2024-10-31T14:26","last_modified":"2024-11-09T21:19","body":{"type":"root","children":[{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is a guide on setting up Cypress Component Testing with Nuxt 3."}]}]},{"type":"element","tag":"h2","props":{"id":"initialize-nuxt-project"},"children":[{"type":"text","value":"Initialize Nuxt project"}]},{"type":"element","tag":"pre","props":{"code":"npx nuxi init nuxt-project\ncd nuxt-project\nnpm install\n","language":"shell","meta":"","className":["language-shell"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npx nuxi init nuxt-project\ncd nuxt-project\nnpm install\n"}]}]},{"type":"element","tag":"h2","props":{"id":"install-initialize-cypress"},"children":[{"type":"text","value":"Install + initialize Cypress"}]},{"type":"element","tag":"pre","props":{"code":"npm install cypress typescript --save-dev\nnpx cypress open\n","language":"shell","meta":"","className":["language-shell"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm install cypress typescript --save-dev\nnpx cypress open\n"}]}]},{"type":"element","tag":"h2","props":{"id":"configure-cypress"},"children":[{"type":"text","value":"Configure Cypress"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cypress.config.ts"}]},{"type":"text","value":" file in your root directory and add the following:"}]},{"type":"element","tag":"pre","props":{"code":"// cypress.config.ts\nimport { defineConfig } from 'cypress'\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'vue',\n      bundler: 'vite',\n    },\n  },\n})\n","language":"ts","meta":"","className":["language-ts"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// cypress.config.ts\nimport { defineConfig } from 'cypress'\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'vue',\n      bundler: 'vite',\n    },\n  },\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is the baseline configuration that works for Vue projects. Nuxt projects require more configuration to get going."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In your root directory, create an additional configuration file. I use "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vite.config.cypress.component.ts"}]},{"type":"text","value":". In it, paste the following:"}]},{"type":"element","tag":"pre","props":{"code":"// `vite.config.cypress.component.ts`\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          isCustomElement: tag => tag.includes('-'),\n        },\n      },\n    }),\n  ],\n}\n","language":"ts","meta":"","className":["language-ts"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// `vite.config.cypress.component.ts`\nimport vue from '@vitejs/plugin-vue'\n\nexport default {\n  plugins: [\n    vue({\n      template: {\n        compilerOptions: {\n          isCustomElement: tag => tag.includes('-'),\n        },\n      },\n    }),\n  ],\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, add this config to your "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cypres.config.ts"}]},{"type":"text","value":" file so that it looks like so:"}]},{"type":"element","tag":"pre","props":{"code":"// cypress.config.ts\nimport { defineConfig } from 'cypress'\nimport viteConfig from '~/vite.config.cypress.component.js'\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'vue',\n      bundler: 'vite',\n      viteConfig,\n    },\n  },\n})\n","language":"ts","meta":"","className":["language-ts"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// cypress.config.ts\nimport { defineConfig } from 'cypress'\nimport viteConfig from '~/vite.config.cypress.component.js'\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'vue',\n      bundler: 'vite',\n      viteConfig,\n    },\n  },\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unfortunately, I don't know exactly what this configuration is doing behind the scenes. I just know it works."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I found this code snippet in "},{"type":"element","tag":"a","props":{"href":"https://github.com/cypress-io/cypress/discussions/21184#discussioncomment-4971326","rel":["nofollow"]},"children":[{"type":"text","value":"this Github thread"}]},{"type":"text","value":" by "},{"type":"element","tag":"a","props":{"href":"https://github.com/elwinvaneede","rel":["nofollow"]},"children":[{"type":"text","value":"@elwinvaneede"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"additional-cypress-component-config"},"children":[{"type":"text","value":"Additional Cypress Component Config"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We need a few more files to make Cypress happy."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a cypress directory containing a component and a support directory in our root directory."}]},{"type":"element","tag":"pre","props":{"code":"├── nuxt-project/\n└── component/\n│ ├── Hello.cy.ts\n└── support/\n│ ├── component-index.html\n│ ├── component.ts\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"├── nuxt-project/\n└── component/\n│ ├── Hello.cy.ts\n└── support/\n│ ├── component-index.html\n│ ├── component.ts\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"component-index.html"}]},{"type":"text","value":" is the base HTML file that Cypress mounts our components to.\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"This file looks like so:"}]}]}]}]},{"type":"element","tag":"pre","props":{"code":"// support/component-index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <title>Components App</title>\n  </head>\n  <body>\n    <div data-cy-root></div>\n  </body>\n</html>\n","language":"html","meta":"","className":["language-html"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// support/component-index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <title>Components App</title>\n  </head>\n  <body>\n    <div data-cy-root></div>\n  </body>\n</html>\n"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"component.ts"}]},{"type":"text","value":" is where we write specific configurations for our component tests."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This file will provide the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mount"}]},{"type":"text","value":" function:"}]},{"type":"element","tag":"pre","props":{"code":"// support/component.ts\nimport { mount } from 'cypress/vue'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount)\n","language":"ts","meta":"","className":["language-ts"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// support/component.ts\nimport { mount } from 'cypress/vue'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount)\n"}]}]},{"type":"element","tag":"h2","props":{"id":"running-the-component-test-runner"},"children":[{"type":"text","value":"Running the Component Test Runner"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When you run "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"npx cypress open"}]},{"type":"text","value":", you should see the component test dashboard with a green configured button. Click it, then Chrome, then Start Component Testing in Chrome, and now we should see our spec runner."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In our Nuxt project, let's create a basic component to test against."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For funsies, I'm just creating a "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Hello.vue"}]},{"type":"text","value":" component with the following:"}]},{"type":"element","tag":"pre","props":{"code":"// components/Hello.vue\n<template>\n  <button>Hello World</button>\n</template>\n","language":"vue","meta":"","className":["language-vue"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/Hello.vue\n<template>\n  <button>Hello World</button>\n</template>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I'm rendering this within my root "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"app.vue"}]},{"type":"text","value":" file:"}]},{"type":"element","tag":"pre","props":{"code":"// app.vue\n<template>\n  <div>\n    <Hello />\n  </div>\n</template>\n","language":"vue","meta":"","className":["language-vue"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// app.vue\n<template>\n  <div>\n    <Hello />\n  </div>\n</template>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now we can mount this component in a cypress test. In our "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cypress/component/Hello.cy.ts"}]},{"type":"text","value":" file, paste the following:"}]},{"type":"element","tag":"pre","props":{"code":"// cypress/component/Hello.cy.ts\nimport Hello from '../../components/Hello.vue'\n\ndescribe('Hello.cy', () => {\n  it('renders', () => {\n    cy.mount(Hello)\n  })\n})\n","language":"ts","meta":"","className":["language-ts"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// cypress/component/Hello.cy.ts\nimport Hello from '../../components/Hello.vue'\n\ndescribe('Hello.cy', () => {\n  it('renders', () => {\n    cy.mount(Hello)\n  })\n})\n"}]}]},{"type":"element","tag":"h2","props":{"id":"styling-our-components-with-tailwindcss-within-the-tests"},"children":[{"type":"text","value":"Styling Our Components with TailwindCSS Within the Tests"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You're probably using a library such as "},{"type":"element","tag":"a","props":{"href":"https://tailwindcss.com/","rel":["nofollow"]},"children":[{"type":"text","value":"TailwindCSS"}]},{"type":"text","value":" to style your component. If that's the case, you'll notice your component isn't styled when running within the component test runner."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's fix that."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Every tutorial I found said I should be able to import my css file within my "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cypress/support/component.ts"}]},{"type":"text","value":" file or link to it using the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"component-index.html"}]},{"type":"text","value":" file. I'm not sure why, but neither of these solutions worked for me."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Instead, I needed to create a Cypress plugin for tailwind at "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cypress/plugins/tailwind.ts"}]},{"type":"text","value":" with the following:"}]},{"type":"element","tag":"pre","props":{"code":"// cypress/support/component.ts\nbefore(() => {\n  cy.exec('npx tailwindcss -i ./assets/css/main.css -m').then(({ stdout }) => {\n    if (!document.head.querySelector('#tailwind-style')) {\n      const link = document.createElement('style')\n      link.id = 'tailwind-style'\n      link.innerHTML = stdout\n\n      document.head.appendChild(link)\n    }\n  })\n})\n","language":"ts","meta":"","className":["language-ts"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// cypress/support/component.ts\nbefore(() => {\n  cy.exec('npx tailwindcss -i ./assets/css/main.css -m').then(({ stdout }) => {\n    if (!document.head.querySelector('#tailwind-style')) {\n      const link = document.createElement('style')\n      link.id = 'tailwind-style'\n      link.innerHTML = stdout\n\n      document.head.appendChild(link)\n    }\n  })\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then import this plugin into your "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cypress/support/component.ts"}]},{"type":"text","value":" file:"}]},{"type":"element","tag":"pre","props":{"code":"// cypress/support/component.ts\nimport { mount } from 'cypress/vue'\nimport '../plugins/tailwind'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount)\n","language":"ts","meta":"","className":["language-ts"]},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// cypress/support/component.ts\nimport { mount } from 'cypress/vue'\nimport '../plugins/tailwind'\n\ndeclare global {\n  namespace Cypress {\n    interface Chainable {\n      mount: typeof mount\n    }\n  }\n}\n\nCypress.Commands.add('mount', mount)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"From what I understand, this is compiling Tailwind and appending the css output to a style tag that is then loaded into the component test runner's HTML."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This does create a bit of lag, but it's the only way I've been able to solve this problem."}]},{"type":"element","tag":"h2","props":{"id":"source-code"},"children":[{"type":"text","value":"Source Code"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can view the code for this project at this "},{"type":"element","tag":"a","props":{"href":"https://github.com/CodyBontecou/cypress-component-testing-with-nuxt-3","rel":["nofollow"]},"children":[{"type":"text","value":"repository"}]},{"type":"text","value":"."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"initialize-nuxt-project","depth":2,"text":"Initialize Nuxt project"},{"id":"install-initialize-cypress","depth":2,"text":"Install + initialize Cypress"},{"id":"configure-cypress","depth":2,"text":"Configure Cypress","children":[{"id":"additional-cypress-component-config","depth":3,"text":"Additional Cypress Component Config"}]},{"id":"running-the-component-test-runner","depth":2,"text":"Running the Component Test Runner"},{"id":"styling-our-components-with-tailwindcss-within-the-tests","depth":2,"text":"Styling Our Components with TailwindCSS Within the Tests"},{"id":"source-code","depth":2,"text":"Source Code"}]}},"_type":"markdown","_id":"content:cypress-component-testing-with-nuxt-3.md","_source":"content","_file":"cypress-component-testing-with-nuxt-3.md","_stem":"cypress-component-testing-with-nuxt-3","_extension":"md"}