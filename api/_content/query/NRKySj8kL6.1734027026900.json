{"_path":"/nuxt3-and-pinia","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Nuxt 3 and Pinia","description":"Integrate Pinia as your state management library for your Nuxt 3 application.","type":"post","author":{"name":"Cody Bontecou","image":"https://codybontecou.com/images/cody-abstract.jpeg"},"date":"2022-02-15","category":"tutorials","dropdown":"NuxtJS","tags":["vue","Vue","Vite","Route","nuxt"],"meta":[{"name":"og:title","content":"Nuxt 3 and Pinia"},{"name":"og:description","content":"Integrate Pinia as your state management library for your Nuxt 3 application."},{"name":"og:image","content":"https://codybontecou.com/images/nuxt3-and-pinia-meta.png"},{"name":"og:image:alt","content":"Nuxt 3 and Pinia"},{"name":"og:title","content":"Nuxt 3 and Pinia"},{"name":"twitter:title","content":"Nuxt 3 and Pinia"},{"name":"twitter:text:title","content":"Nuxt 3 and Pinia"}],"canonicalUrl":"https://codybontecou.com/nuxt3-and-pinia.html","topics":["Nuxt","Pinia","State","Vue"],"created_at":"2024-10-31T14:26","last_modified":"2024-11-09T21:19","body":{"type":"root","children":[{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Integrate Pinia as your state management library for your Nuxt 3 application."}]}]},{"type":"element","tag":"h2","props":{"id":"vuex-pinia"},"children":[{"type":"text","value":"Vuex -> Pinia"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Evan You, the creator of Vue himself, has stated \"Pinia is de facto Vuex 5! At this point it’s really a naming/branding issue.\""}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For the time being, it's probably best to be looking towards Pinia content rather than Vuex."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"\"Pinia is de facto Vuex 5! At this point it’s really a naming/branding issue.\"","src":"https://codybontecou.com/images/evan-pinia-tweet.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I recommend reading VueJS's official "},{"type":"element","tag":"a","props":{"href":"https://vuejs.org/guide/scaling-up/state-management.html#pinia","rel":["nofollow"]},"children":[{"type":"text","value":"post"}]},{"type":"text","value":" regarding this to get a better understanding as to why Pinia > Vuex."}]},{"type":"element","tag":"h2","props":{"id":"installing-pinia-in-nuxt-3"},"children":[{"type":"text","value":"Installing Pinia in Nuxt 3"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Pinia nearly comes with first-class support for Nuxt 3. You'll need to install two packages:"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"yarn add pinia\nyarn add @pinia/nuxt\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"yarn add pinia\nyarn add @pinia/nuxt\n"}]}]},{"type":"element","tag":"h2","props":{"id":"add-pinia-to-your-nuxtconfig-file"},"children":[{"type":"text","value":"Add Pinia to your nuxt.config file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You'll need to add "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"'@pinia/nuxt'"}]},{"type":"text","value":" to your modules array."}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@pinia/nuxt'],\n})\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@pinia/nuxt'],\n})\n"}]}]},{"type":"element","tag":"h2","props":{"id":"build-your-pinia-store"},"children":[{"type":"text","value":"Build your Pinia store"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now build a named store. For my use-case, I needed to manage state regarding filters, so the skeleton of my store looks like:"}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"// store/filters.ts\nimport { defineStore } from 'pinia'\n\nexport const useFiltersStore = defineStore({\n  id: 'filter-store',\n  state: () => {\n    return {\n      filtersList: ['youtube', 'twitch'],\n    }\n  },\n  actions: {\n    addValueToFilterList(value: string) {\n      this.filtersList.push(value)\n    },\n  },\n  getters: {\n    filtersList: state => state.filtersList,\n  },\n})\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// store/filters.ts\nimport { defineStore } from 'pinia'\n\nexport const useFiltersStore = defineStore({\n  id: 'filter-store',\n  state: () => {\n    return {\n      filtersList: ['youtube', 'twitch'],\n    }\n  },\n  actions: {\n    addValueToFilterList(value: string) {\n      this.filtersList.push(value)\n    },\n  },\n  getters: {\n    filtersList: state => state.filtersList,\n  },\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is just showing the general structure of your store. The key is to "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"defineStore"}]},{"type":"text","value":" and make sure to include an "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"id"}]},{"type":"text","value":". In this case, I'm using "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"'filter-store'"}]},{"type":"text","value":" as my id but it could be anything you prefer."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Read over Pinia's "},{"type":"element","tag":"a","props":{"href":"https://pinia.vuejs.org/core-concepts/","rel":["nofollow"]},"children":[{"type":"text","value":"Docs"}]},{"type":"text","value":" to get a better grasp of how to use Pinia properly."}]},{"type":"element","tag":"h2","props":{"id":"alternative-pinia-store-syntax"},"children":[{"type":"text","value":"Alternative Pinia Store Syntax"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The above example is a valid Pinia store using a pattern similar to Vue's Options API. You can also define your store using a syntax similar to the Composition API."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's how you can build the above example in a composable way:"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// store/filters.ts\nimport { defineStore } from 'pinia'\n\nexport const useFiltersStore = defineStore('filterStore', () => {\n  const filtersList = ref(['youtube', 'twitch'])\n\n  function addValueToFilterList(value: string) {\n    filtersList.value.push(value)\n  }\n  return { addValueToFilterList, filtersList }\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// store/filters.ts\nimport { defineStore } from 'pinia'\n\nexport const useFiltersStore = defineStore('filterStore', () => {\n  const filtersList = ref(['youtube', 'twitch'])\n\n  function addValueToFilterList(value: string) {\n    filtersList.value.push(value)\n  }\n  return { addValueToFilterList, filtersList }\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We just reduced the amount of code significantly. Pretty cool, right? I personally prefer the composition."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Instead of relying on the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"state"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"action"}]},{"type":"text","value":", and "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"getter"}]},{"type":"text","value":" boilerplate, we use Vue's "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ref"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"computed"}]},{"type":"text","value":", and traditional Javascript functions to manage our state."}]},{"type":"element","tag":"h2","props":{"id":"bring-pinia-in-vue-component"},"children":[{"type":"text","value":"Bring Pinia in Vue Component"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With our store in place, simply import it into the component you want to use it in and have fun!"}]},{"type":"element","tag":"pre","props":{"className":["language-vue"],"code":"// components/FilterMenu.vue\n<script setup>\nimport { useFiltersStore } from '~/store/filters'\nimport { storeToRefs } from 'pinia'\n\nconst inputVal = ref('')\n\nconst filtersStore = useFiltersStore()\nconst { addValueToFilterList } = filtersStore\nconst { filtersList } = storeToRefs(filtersStore)\n</script>\n\n<template>\n  <div>\n    {{ filtersList }}\n    <input v-model=\"inputVal\" />\n    <button @click=\"addValueToFilterList(inputVal)\">+</button>\n  </div>\n</template>\n","language":"vue","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// components/FilterMenu.vue\n<script setup>\nimport { useFiltersStore } from '~/store/filters'\nimport { storeToRefs } from 'pinia'\n\nconst inputVal = ref('')\n\nconst filtersStore = useFiltersStore()\nconst { addValueToFilterList } = filtersStore\nconst { filtersList } = storeToRefs(filtersStore)\n</script>\n\n<template>\n  <div>\n    {{ filtersList }}\n    <input v-model=\"inputVal\" />\n    <button @click=\"addValueToFilterList(inputVal)\">+</button>\n  </div>\n</template>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The line "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"import { storeToRefs } from 'pinia'"}]},{"type":"text","value":" allows us to maintain a reactive getter. In this case, we are destructuring the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"filterList"}]},{"type":"text","value":" getter from our "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"filtersStore"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's the "},{"type":"element","tag":"a","props":{"href":"https://github.com/CodyBontecou/nuxt3-and-pinia","rel":["nofollow"]},"children":[{"type":"text","value":"repo"}]},{"type":"text","value":" if you'd like to see a working project."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"vuex-pinia","depth":2,"text":"Vuex -> Pinia"},{"id":"installing-pinia-in-nuxt-3","depth":2,"text":"Installing Pinia in Nuxt 3"},{"id":"add-pinia-to-your-nuxtconfig-file","depth":2,"text":"Add Pinia to your nuxt.config file"},{"id":"build-your-pinia-store","depth":2,"text":"Build your Pinia store"},{"id":"alternative-pinia-store-syntax","depth":2,"text":"Alternative Pinia Store Syntax"},{"id":"bring-pinia-in-vue-component","depth":2,"text":"Bring Pinia in Vue Component"}]}},"_type":"markdown","_id":"content:nuxt3-and-pinia.md","_source":"content","_file":"nuxt3-and-pinia.md","_stem":"nuxt3-and-pinia","_extension":"md"}