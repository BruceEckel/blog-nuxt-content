[{"_path":"/mocking-http-responses-in-elixir-and-phoenix","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Mocking HTTP Responses in Elixir and Phoenix","description":"A quick walkthrough of the configuration needed to support mocks and modules only used within your Elixir tests","type":"post","author":{"name":"Cody Bontecou","image":"/assets/img/cody.64b57256.jpg"},"date":"2023-08-13T00:00:00.000Z","last_modified_date":"2023-08-13T00:00:00.000Z","slug":"mocking-http-responses-in-elixir-and-phoenix","dropdown":"Elixir","meta":[{"name":"og:description","content":"A quick walkthrough of the configuration needed to support mocks and modules only used within your Elixir tests"},{"name":"og:image","content":"https://codybontecou.com/images/mocking-http-responses-in-elixir-and-phoenix.png"},{"name":"og:image:alt","content":"A quick walkthrough of the configuration needed to support mocks and modules only used within your Elixir tests"},{"name":"og:title","content":"Mocking HTTP Responses in Elixir and Phoenix"},{"name":"twitter:title","content":"Mocking HTTP Responses in Elixir and Phoenix"},{"name":"twitter:text:title","content":"Mocking HTTP Responses in Elixir and Phoenix"}],"canonicalUrl":"https://codybontecou.com/mocking-http-responses-in-elixir-and-phoenix.html","topics":["elixir","testing","mocking"],"created_at":"2024-10-31T14:26","last_modified":"2024-11-09T21:19","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I just came across this error while attempting to mock the response of a 3rd party api:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"** (UndefinedFunctionError) function LeagueInfoMocks.get_live/0 is undefined (module LeagueInfoMocks is not available)"}]}]},{"type":"element","tag":"h2","props":{"id":"the-problem"},"children":[{"type":"text","value":"The Problem"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I couldn't wrap my head around it. I have this simple mock module defined:"}]},{"type":"element","tag":"pre","props":{"className":["language-elixir"],"code":"defmodule LeagueInfoMocks do\n  def get_live do\n    %{...}\n  end\nend\n\n","language":"elixir","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"defmodule LeagueInfoMocks do\n  def get_live do\n    %{...}\n  end\nend\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And a test module to interact with the get_live function:"}]},{"type":"element","tag":"pre","props":{"className":["language-elixir"],"code":"defmodule LeagueInfoTest do\n  use ExUnit.Case\n  test \"format_info\" do\n    data = LeagueInfoMocks.get_live()\n\n    [match | _tail] = data\n\n    assert LeagueInfo.format_info(data) == %{...}\n  end\nend\n\n","language":"elixir","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"defmodule LeagueInfoTest do\n  use ExUnit.Case\n  test \"format_info\" do\n    data = LeagueInfoMocks.get_live()\n\n    [match | _tail] = data\n\n    assert LeagueInfo.format_info(data) == %{...}\n  end\nend\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"But running "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mix test"}]},{"type":"text","value":" would consistently give me the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"** (UndefinedFunctionError) function LeagueInfoMocks.get_live/0 is undefined (module LeagueInfoMocks is not available)"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"the-solution"},"children":[{"type":"text","value":"The Solution"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Most articles and threads mentioned moving the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"LeagueInfoMocks"}]},{"type":"text","value":" module in the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"test/support/*"}]},{"type":"text","value":" directory, so I did. This didn't change the error message."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I eventually found "},{"type":"element","tag":"a","props":{"href":"https://stackoverflow.com/a/73967553/6642089","rel":["nofollow"]},"children":[{"type":"text","value":"this"}]},{"type":"text","value":" Stackoverflow comment that mentioned some configuration needed in the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mix.exs"}]},{"type":"text","value":" file."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Supposedly, "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mix phx.new"}]},{"type":"text","value":" adds the "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"test/support/*"}]},{"type":"text","value":" support when a Phoenix project is created. In my case, I'm building off of a simple Elixir application. This required me to configure my "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mix.exs"}]},{"type":"text","value":" file to look like so:"}]},{"type":"element","tag":"pre","props":{"className":["language-elixir"],"code":"defmodule LolesportsConsumer.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :lolesports_consumer,\n      version: \"0.1.0\",\n      elixir: \"~> 1.15\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps(),\n      elixirc_paths: elixirc_paths(Mix.env())\n    ]\n  end\n\n  # Run \"mix help compile.app\" to learn about applications.\n  def application do\n    [\n      extra_applications: [:logger]\n    ]\n  end\n\n  # Run \"mix help deps\" to learn about dependencies.\n  defp deps do\n    [\n      {:httpoison, \"~> 2.1\"},\n      {:jason, \"~> 1.4\"}\n    ]\n  end\n\n  defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]\n  defp elixirc_paths(_), do: [\"lib\"]\nend\n\n","language":"elixir","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"defmodule LolesportsConsumer.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :lolesports_consumer,\n      version: \"0.1.0\",\n      elixir: \"~> 1.15\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps(),\n      elixirc_paths: elixirc_paths(Mix.env())\n    ]\n  end\n\n  # Run \"mix help compile.app\" to learn about applications.\n  def application do\n    [\n      extra_applications: [:logger]\n    ]\n  end\n\n  # Run \"mix help deps\" to learn about dependencies.\n  defp deps do\n    [\n      {:httpoison, \"~> 2.1\"},\n      {:jason, \"~> 1.4\"}\n    ]\n  end\n\n  defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]\n  defp elixirc_paths(_), do: [\"lib\"]\nend\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The key differences were:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Adding "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"elixirc_paths: elixirc_paths(Mix.env())"}]},{"type":"text","value":" to "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"project"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Adding these two lines to the file:\n"},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"defp elixirc_paths(:test), do: [\"lib\", \"test/support\"]"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"defp elixirc_paths(_), do: [\"lib\"]"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"conclusion"},"children":[{"type":"text","value":"Conclusion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With these configuration changes, I am able to properly call "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"LeagueInfoMocks.get_live()"}]},{"type":"text","value":" and write tests against an expected HTTP response."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"the-problem","depth":2,"text":"The Problem"},{"id":"the-solution","depth":2,"text":"The Solution"},{"id":"conclusion","depth":2,"text":"Conclusion"}]}},"_type":"markdown","_id":"content:mocking-http-responses-in-elixir-and-phoenix.md","_source":"content","_file":"mocking-http-responses-in-elixir-and-phoenix.md","_stem":"mocking-http-responses-in-elixir-and-phoenix","_extension":"md"}]